
name: Deploy to Firebase Hosting

on:
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  build_and_deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necessário para pegar todas as tags

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Get short SHA
        id: a-short-sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Enable Web Frameworks experiment
        run: firebase experiments:enable webframeworks

      - name: Deploy to Firebase Hosting
        id: deploy
        run: NEXT_PUBLIC_APP_VERSION=${{ steps.a-short-sha.outputs.sha_short }} firebase deploy --token ${{ secrets.FIREBASE_TOKEN }} --project inovai-pr4x6

      - name: Create Git Tag
        id: create_tag
        uses: actions/github-script@v6
        with:
          script: |
            const version = 'v${{ steps.a-short-sha.outputs.sha_short }}';
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${version}`,
              sha: context.sha
            });
            console.log(`Tag ${version} created.`);
            return version;
      
      - name: Create GitHub Release
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const tagName = '${{ steps.create_tag.outputs.result }}';
            const releaseTitle = `Release ${tagName}`;
            const releaseBody = `Release da versão ${tagName} gerada a partir do PR #${context.payload.pull_request.number}.`;
            
            await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tagName,
              name: releaseTitle,
              body: releaseBody,
              prerelease: false
            });