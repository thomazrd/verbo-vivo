rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Base Functions & Rules
    // =================================
    function userData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isUserAuthenticated() {
      return request.auth != null;
    }

    // =================================
    // Articles Rules
    // =================================
    match /articles/{articleId} {
      allow read: if resource.data.status == 'published';
      allow write: if isUserAuthenticated() && userData(request.auth.uid).role == 'ADMIN';
    }

    // =================================
    // Chat Rules
    // =================================
    match /users/{userId}/messages/{messageId} {
      allow read, write: if isOwner(userId);
    }

    // =================================
    // Community Rules
    // =================================
    match /congregations/{congregationId} {
      allow read: if isUserAuthenticated();
      
      // Only admins can update congregation details. Creation is handled by a Cloud Function.
      allow update: if isUserAuthenticated() && userData(request.auth.uid).role == 'ADMIN';

      // Rules for members subcollection
      match /members/{memberId} {
        allow read: if isUserAuthenticated();
        
        // Creation (joining) and updates (approval) are handled by Cloud Functions
        allow create, update, delete: if isUserAuthenticated() && (
          isOwner(memberId) || userData(request.auth.uid).role == 'ADMIN'
        );
      }

      // Rules for posts subcollection
      match /posts/{postId} {
        allow read: if isUserAuthenticated();
        
        // Any member can create posts
        allow create: if isUserAuthenticated() && get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'MEMBER' || get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN';
        
        // Only author or admin can update/delete
        allow update, delete: if isUserAuthenticated() && (isOwner(resource.data.authorId) || userData(request.auth.uid).role == 'ADMIN');

        // Rules for likes and comments
        match /likes/{userId} {
          allow read: if isUserAuthenticated();
          // Any authenticated member can like/unlike a post
          allow write: if isOwner(userId);
        }
        
        match /comments/{commentId} {
          allow read: if isUserAuthenticated();
          // Any authenticated member can create a comment
          allow create: if isUserAuthenticated();
          // Only the author of the comment or an admin can update/delete
          allow update, delete: if isUserAuthenticated() && (isOwner(resource.data.authorId) || userData(request.auth.uid).role == 'ADMIN');
        }
      }
    }

    // =================================
    // Feeling Journey Rules
    // =================================
    match /feelingJourneys/{journeyId} {
      allow read, create: if isOwner(resource.data.userId);
    }

    // =================================
    // Journal Rules
    // =================================
    match /journals/{entryId} {
      allow read, write: if isOwner(resource.data.userId);
    }

    // =================================
    // Meditations Rules
    // =================================
    match /meditations/{meditationId} {
      allow read, create: if isOwner(resource.data.userId);
    }

    // =================================
    // Notifications Rules
    // =================================
    match /notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.recipientId);
      // Notifications are created by Cloud Functions, not clients.
      allow create, delete: if false;
    }

    // =================================
    // Plans Rules
    // =================================
    match /users/{userId}/plans/{planId} {
      allow read, write: if isOwner(userId);
    }

    // =================================
    // Prayers Rules
    // =================================
    match /prayers/{prayerId} {
      allow read, create: if isOwner(resource.data.userId);
    }

    // =================================
    // Prayer Circles Rules
    // =================================
    match /prayerCircles/{circleId} {
      allow read: if resource.data.isPublic == true || request.auth.uid in resource.data.members;
      allow create: if isUserAuthenticated();
      allow update: if request.auth.uid in resource.data.members;
    }
    
    match /victories/{victoryId} {
        allow read: if true;
        allow create: if isUserAuthenticated();
        allow update: if isUserAuthenticated();
    }


    // =================================
    // Shared Content (Ponte da Esperan√ßa) Rules
    // =================================
    match /sharedContent/{contentId} {
      allow read: if true;
      allow create: if isUserAuthenticated();
      allow update: if isOwner(resource.data.creatorId);
    }
    
    // =================================
    // Studies Rules
    // =================================
    match /studies/{studyId} {
       allow read: if resource.data.status == 'PUBLISHED' || (isUserAuthenticated() && userData(request.auth.uid).role == 'ADMIN');
       allow write: if isUserAuthenticated() && userData(request.auth.uid).role == 'ADMIN';
    }

    // =================================
    // Users Rules
    // =================================
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId);
    }
    
    match /userPushTokens/{userId} {
        allow read, write: if isOwner(userId);
    }

    // =================================
    // Armor Rules
    // =================================
    match /users/{userId}/armors/{armorId} {
        allow read, write: if isOwner(userId);
    }
    
    match /sharedArmors/{armorId} {
        allow read: if true;
        allow write: if isOwner(resource.data.userId);
    }
  }
}
