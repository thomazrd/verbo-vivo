rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =============================================
    //           FUNÇÕES DE UTILIDADE
    // =============================================

    // --- Funções de Autenticação ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isProfileOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isSignedIn() && request.auth.token.role == 'ADMIN';
    }

    function isCongregationMember(congregationId) {
      return isSignedIn() && get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status != 'PENDING';
    }
    
    function isCongregationAdmin(congregationId) {
       return isSignedIn() && get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN';
    }

    // --- Funções de Validação de Dados ---
    function isString(value) {
      return value is string;
    }

    function isStringSized(value, min, max) {
      return isString(value) && value.size() >= min && value.size() <= max;
    }

    function isBoolean(value) {
      return value is bool;
    }
    
    function isTimestamp(value) {
        return value is timestamp;
    }

    function canReadStudy() {
  // Allow read if the study is published, or if the user is an admin reading any status.
  return resource.data.status == 'PUBLISHED' || (isSignedIn() && isRole('ADMIN'));
}

function canWriteStudy() {
  // Allow write only if the user is an admin.
  return isSignedIn() && isRole('ADMIN');
}

function canReadArticle() {
  return resource.data.status == 'published' || (isSignedIn() && isRole('ADMIN'));
}

function canWriteArticle() {
  return isSignedIn() && isRole('ADMIN');
}



match /articles/{articleId} {
  // Qualquer pessoa pode ler artigos publicados.
  allow read: if resource.data.status == 'published';

  // Apenas administradores podem criar, atualizar ou deletar artigos.
  allow write: if isAdmin();
}


// collections/battlePlans.rules

// Função auxiliar para verificar se o usuário é o criador de um plano
function isPlanCreator(planId) {
  return request.auth.uid == get(/databases/$(database)/documents/battlePlans/$(planId)).data.creatorId;
}

match /battlePlans/{planId} {
  // Leitura: Qualquer usuário autenticado pode ler planos publicados.
  allow read: if isSignedIn() && resource.data.status == 'PUBLISHED';

  // Criação: Qualquer usuário autenticado pode criar um plano (será um líder).
  allow create: if isSignedIn();

  // Atualização e Exclusão: Apenas o criador original do plano pode modificar ou apagar.
  allow update, delete: if isSignedIn() && isPlanCreator(planId);

  // Regras para a subcoleção de missões (geralmente gerenciada junto com o plano)
  match /missions/{missionId} {
    allow read: if isSignedIn();
    // A escrita (create, update, delete) de missões é controlada pela permissão de 'update' do plano pai.
    allow write: if isSignedIn() && isPlanCreator(planId);
  }
}

match /userBattlePlans/{userPlanId} {
  // Leitura: Um usuário pode ler seu próprio progresso.
  // Um LÍDER pode ler o progresso de um soldado SE o soldado deu consentimento.
  allow read: if isProfileOwner(request.auth.uid) ||
              (isSignedIn() && resource.data.consentToShareProgress == true &&
               request.auth.uid == resource.data.planCreatorId);

  // Criação: Um usuário pode criar seu próprio registro de progresso (iniciar um plano).
  allow create: if isProfileOwner(request.resource.data.userId);

  // Atualização: Um usuário só pode atualizar seu próprio progresso.
  allow update: if isProfileOwner(request.auth.uid);

  // Exclusão: Um usuário só pode apagar seu próprio progresso.
  allow delete: if isProfileOwner(request.auth.uid);
}

match /missionLogs/{logId} {
  // Um usuário só pode ler, criar, atualizar ou apagar seus próprios logs de missão.
  allow read, write: if isProfileOwner(request.auth.uid);
}


// Regras para a Coleção de Congregações
match /congregations/{congregationId} {
    // Qualquer usuário logado pode ler os dados da congregação (nome, etc)
    allow read: if isSignedIn();

    // Apenas um usuário logado pode criar uma congregação, e ele deve ser o criador
    allow create: if isSignedIn() && request.auth.uid == request.resource.data.createdBy;

    // Apenas administradores podem atualizar ou deletar a congregação
    allow update, delete: if isCongregationAdmin(congregationId);

    // --- Subcoleção de Membros ---
    match /members/{userId} {
        // Apenas membros da congregação podem ver a lista de outros membros
        allow read, list: if isCongregationMember(congregationId);
        
        // Um usuário pode criar um documento para si mesmo (solicitar entrada)
        allow create: if isSignedIn() && request.auth.uid == userId;

        // Apenas admins podem atualizar o status de um membro (aprovar, etc)
        allow update: if isCongregationAdmin(congregationId);
        
        // Admins podem remover membros, e um membro pode sair
        allow delete: if isCongregationAdmin(congregationId) || request.auth.uid == userId;
    }

    // --- Subcoleção de Posts ---
    match /posts/{postId} {
        // Apenas membros podem ler os posts
        allow read: if isCongregationMember(congregationId);

        // Um membro pode criar um post para si mesmo.
        allow create: if isCongregationMember(congregationId) && request.auth.uid == request.resource.data.authorId;
        
        // Apenas o autor do post pode atualizar ou deletar o post.
        allow update, delete: if isProfileOwner(resource.data.authorId);

        // --- Subcoleção de Comentários ---
        match /comments/{commentId} {
            // Todos os membros podem ler os comentários
            allow read: if isCongregationMember(congregationId);

            // QUALQUER membro da congregação pode criar um comentário.
            allow create: if isCongregationMember(congregationId) && request.auth.uid == request.resource.data.authorId;

            // Apenas o AUTOR do comentário pode editar ou apagar.
            allow update, delete: if isProfileOwner(resource.data.authorId);
        }

        // --- Subcoleção de Likes ---
        match /likes/{userId} {
             // Todos os membros podem ver quem curtiu.
            allow read: if isCongregationMember(congregationId);

            // Um membro só pode criar ou deletar a sua própria curtida.
            allow create, delete: if isCongregationMember(congregationId) && request.auth.uid == userId;
        }
    }
}



match /sharedArmors/{armorId} {
  allow read: if true;
  allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
  allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
}



match /studies/{studyId} {
  // Qualquer pessoa pode ler um estudo publicado.
  allow read: if resource.data.status == 'PUBLISHED';

  // Apenas administradores podem criar, atualizar ou deletar estudos.
  allow write: if isAdmin();
}



match /users/{userId} {
  // Qualquer usuário autenticado pode ler perfis (para ver nomes, fotos, etc).
  allow read: if isSignedIn();
  
  // Apenas o próprio usuário pode escrever em seu perfil.
  allow write: if isProfileOwner(userId);

  // Subcoleção de planos de estudo
  match /plans/{planId} {
    // Apenas o dono do perfil pode acessar seus próprios planos.
    allow read, write, delete: if isProfileOwner(userId);
  }
  
  // Subcoleção de armaduras
  match /armors/{armorId} {
     // Apenas o dono do perfil pode acessar suas próprias armaduras.
    allow read, write, delete: if isProfileOwner(userId);
  }
}

// Armaduras compartilhadas podem ser lidas por qualquer usuário autenticado.
match /sharedArmors/{armorId} {
    allow read: if isSignedIn();
    // A escrita (criar/atualizar/deletar) é gerenciada pelo dono na sua própria coleção /users/{userId}/armors
    allow write: if false;
}
  }
}
