rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================
    // Users Collection
    // =================================
    match /users/{userId} {
      // Anyone authenticated can read a user's public profile
      allow read: if request.auth != null;
      
      // A user can create their own profile document
      allow create: if request.auth.uid == userId;
      
      // A user can update their own profile data.
      // An admin of the user's congregation can also update their status.
      allow update: if request.auth.uid == userId || 
                      (get(/databases/$(database)/documents/congregations/$(request.resource.data.congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN');
    }

    // =================================
    // Congregations Collection
    // =================================
    match /congregations/{congregationId} {
      // Any authenticated user can read congregation info (to search/join)
      allow read: if request.auth != null;
      
      // Allow authenticated users to create a new congregation
      allow create: if request.auth != null;
      
      // Only admins of that congregation can update it
      allow update: if get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN';
      
      // --- Members Subcollection ---
      match /members/{userId} {
        // Any authenticated user can read the member list
        allow read: if request.auth != null;
        
        // A user can request to join (create their own member doc with 'PENDING' status)
        allow create: if request.auth.uid == userId && request.resource.data.status == 'PENDING';
        
        // Only admins can update a member's status (approve, promote)
        // A user can also leave (which is a delete operation)
        allow update: if get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN';
        
        // Admins can remove members. A user can remove themselves (leave).
        allow delete: if get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN' || request.auth.uid == userId;
      }
      
      // --- Posts Subcollection ---
      match /posts/{postId} {
        // Any member of the congregation can read posts
        allow read: if get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
        
        // Any member can create a post
        allow create: if get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
        
        // Only the post author or an admin can update/delete a post
        allow update, delete: if get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN' || resource.data.authorId == request.auth.uid;
        
        // --- Likes and Comments Subcollections ---
        match /likes/{userId} {
           allow read: if get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
           // A member can like/unlike (create/delete their own like doc)
           allow create, delete: if request.auth.uid == userId && get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
        }
        
        match /comments/{commentId} {
            allow read: if get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
            // A member can create a comment
            allow create: if get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
            // Only the comment author or an admin can update/delete it
            allow update, delete: if get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN' || resource.data.authorId == request.auth.uid;
        }
      }
    }
    
    // =================================
    // Journals, Plans, Meditations (User-specific)
    // =================================
    match /journals/{entryId} {
        allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    match /users/{userId}/plans/{planId} {
        allow read, write: if request.auth.uid == userId;
    }
    
    match /meditations/{meditationId} {
       allow read, write: if request.auth.uid == resource.data.userId;
    }
    
    match /users/{userId}/messages/{messageId} {
       allow read, write: if request.auth.uid == userId;
    }

    // =================================
    // Shared Content (Ponte da Esperan√ßa)
    // =================================
    match /sharedContent/{contentId} {
        // Anyone can read shared content (it's public)
        allow read;
        // Only authenticated users can create it
        allow create: if request.auth != null;
        // Only the creator can update it (not really used in app, but good practice)
        allow update: if request.auth.uid == resource.data.creatorId;
    }
    
    // =================================
    // Notifications and Push Tokens
    // =================================
    match /notifications/{notificationId} {
        // A user can only read or update (mark as read) their own notifications
        allow read, update: if request.auth.uid == resource.data.recipientId;
    }
    
    match /userPushTokens/{userId} {
      // A user can only manage their own push token
      allow read, write: if request.auth.uid == userId;
    }
  }
}
