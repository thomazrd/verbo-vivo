
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /articles/{articleId} {
      // Qualquer pessoa pode ler um artigo publicado
      allow read: if resource.data.status == 'published';

      // Apenas administradores podem criar, editar ou apagar artigos
      allow write: if request.auth != null && userData(request.auth.uid).role == 'ADMIN';
    }
  }
}



rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Funções de Ajuda Globais ---

    // Retorna os dados de um perfil de usuário
    function userData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Verifica se o usuário autenticado é o dono do documento
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Verifica se o usuário autenticado é um administrador global
    function isAdmin() {
        return request.auth != null && userData(request.auth.uid).role == 'ADMIN';
    }
  }
}


    // Regras para o Módulo de Chat
    match /users/{userId}/messages/{messageId} {
      allow read, write: if isOwner(userId);
    }



rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Coleção: congregations
    match /congregations/{congregationId} {
      // Qualquer usuário autenticado pode ler os dados de uma congregação
      allow read: if request.auth != null;
      
      // Apenas administradores da congregação podem atualizar os dados
      allow update: if request.auth != null && resource.data.admins[request.auth.uid] == true;
      
      // A criação é gerenciada por uma Cloud Function, não por regras diretas
      allow create: if false; 
      
      // Subcoleção: members
      match /members/{userId} {
        // Leitura: qualquer membro da congregação pode ver outros membros
        allow read: if request.auth != null && get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
        
        // Escrita: Apenas admins podem alterar status (aprovar, promover). O próprio usuário pode se remover.
        // A lógica de adição (solicitação) e aprovação é feita via Cloud Functions para segurança.
        allow write: if request.auth != null && (
          // Admin gerenciando
          get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true ||
          // Usuário saindo (deletando seu próprio documento de membro)
          (request.auth.uid == userId && request.resource == null)
        );
      }
      
      // Subcoleção: posts
      match /posts/{postId} {
        // Leitura: Membros da congregação podem ler posts
        allow read: if request.auth != null && get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
        
        // Escrita: Membros podem criar posts. Apenas o autor ou admin podem editar/deletar.
        allow create: if request.auth != null && get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
        allow update, delete: if request.auth != null && (
          resource.data.authorId == request.auth.uid ||
          get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true
        );
        
        // Subcoleções de posts
        match /{subcollection}/{docId} {
           // Qualquer membro pode criar likes e comentários
           allow create: if request.auth != null && get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
           
           // Apenas o autor do like/comentário pode deletá-lo
           allow delete: if request.auth != null && resource.data.authorId == request.auth.uid;

           // Apenas o autor do comentário pode editá-lo
           allow update: if subcollection == 'comments' && request.auth != null && resource.data.authorId == request.auth.uid;
        }
      }
    }
  }
}


    // === REGRAS GERAIS ===

    // Diário Pessoal
    match /journals/{journalId} {
      allow read, write, delete: if isOwner(request.resource.data.userId);
    }

    // Planos de Estudo Pessoais
    match /plans/{planId} {
        allow read, write, delete: if isOwner(request.resource.data.userId);
    }

    // Orações Pessoais
    match /prayers/{prayerId} {
       allow read, write, delete: if isOwner(request.resource.data.userId);
    }

    // Meditações Pessoais
    match /meditations/{meditationId} {
       allow read, write, delete: if isOwner(request.resource.data.userId);
    }

    // Jornadas de Sentimento
    match /feelingJourneys/{journeyId} {
       allow read, write, delete: if isOwner(request.resource.data.userId);
    }

    // Ponte da Esperança (Conteúdo Compartilhado)
    match /sharedContent/{contentId} {
      allow read: if resource.data.status == 'ACTIVE';
      allow create: if isUserAuthenticated() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isOwner(resource.data.creatorId); // Para marcar como deletado
    }

    // Tokens para Notificações Push
    match /userPushTokens/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Notificações do Usuário
    match /notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.recipientId);
    }



rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /sharedContent/{contentId} {
      // Qualquer pessoa pode ler um conteúdo compartilhado que está ativo
      allow read: if resource.data.status == 'ACTIVE';

      // O criador pode atualizar (ex: para deletar logicamente)
      allow update: if request.auth != null && request.auth.uid == resource.data.creatorId;

      // Qualquer usuário autenticado pode criar
      allow create: if request.auth != null;
      
      // Ninguém pode deletar diretamente
      allow delete: if false;
    }
  }
}



rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Coleção: studies (Estudos / Pílulas de Sabedoria)
    match /studies/{studyId} {
      // Leitura: Permitida para todos se o status for 'PUBLISHED'.
      // Apenas admins podem ler rascunhos.
      allow read: if resource.data.status == 'PUBLISHED' ||
                   (request.auth != null && userData(request.auth.uid).role == 'ADMIN');

      // Escrita (criar, atualizar, deletar): Apenas para administradores.
      allow write: if request.auth != null && userData(request.auth.uid).role == 'ADMIN';
    }

    // Coleção: suggestions (Sugestões de temas para estudos)
    match /suggestions/{suggestionId} {
      // Qualquer usuário autenticado pode criar uma sugestão.
      allow create: if request.auth != null;
      
      // Apenas administradores podem ler e atualizar (para arquivar/processar).
      allow read, update: if request.auth != null && userData(request.auth.uid).role == 'ADMIN';

      // Ninguém pode deletar sugestões diretamente.
      allow delete: if false;
    }
  }
}


    // === REGRAS DE USUÁRIOS ===
    match /users/{userId} {
      // Qualquer usuário autenticado pode ler perfis para funcionalidades da comunidade
      allow read: if isUserAuthenticated();
      
      // Usuário só pode criar e modificar seu próprio perfil
      allow create, update: if isOwner(userId);
    }



  }
}


