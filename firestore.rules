rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================
    // Regras da Coleção de Usuários
    // =================================
    match /users/{userId} {
      // Qualquer usuário autenticado pode criar seu próprio perfil.
      allow create: if request.auth.uid == userId;
      // Os usuários só podem ler e atualizar seus próprios perfis.
      allow read, update: if request.auth.uid == userId;
    }
    
    // =================================
    // Regras da Coleção de Congregações
    // =================================
    match /congregations/{congregationId} {
      // Qualquer usuário autenticado pode ler a lista de congregações (para encontrar pelo código).
      allow read: if request.auth.uid != null;
      // Usuários autenticados podem criar novas congregações.
      allow create: if request.auth.uid != null;
    }

    // --- Subcoleções da Congregação ---
    match /congregations/{congregationId}/posts/{postId} {
      // Qualquer membro da congregação pode ler e criar posts.
      allow read, create: if isMember(congregationId);
      // Apenas o autor pode atualizar ou excluir um post.
      allow update, delete: if isAuthor(resource.data.authorId);
    }
    
    match /congregations/{congregationId}/posts/{postId}/{subcollection}/{docId} {
       // Qualquer membro pode ler likes e comentários.
       allow read: if isMember(congregationId);
       // Qualquer membro pode criar likes e comentários.
       allow create: if isMember(congregationId);
       // Apenas o autor pode atualizar ou excluir seu próprio like ou comentário.
       allow update, delete: if isAuthor(resource.data.authorId);
    }

    match /congregations/{congregationId}/members/{memberId} {
      // O usuário pode criar sua própria solicitação de entrada (com status PENDING).
      allow create: if request.auth.uid == memberId && request.resource.data.status == 'PENDING';
      // Membros da congregação podem ler a lista de outros membros.
      allow read: if isMember(congregationId);
      // Admins podem atualizar (aprovar/promover) ou excluir (rejeitar/remover) membros.
      allow update, delete: if isAdmin(congregationId);
    }
    
    // =================================
    // Regras de outras coleções
    // =================================
    match /journals/{entryId} {
        allow read, update, delete: if isAuthor(resource.data.userId);
        allow create: if isAuthor(request.resource.data.userId);
    }
    
    match /sharedContent/{contentId} {
        allow read, create, update: if request.auth.uid != null;
    }
    
    match /notifications/{notificationId} {
      allow read, update: if request.auth.uid == resource.data.recipientId;
    }
    
    match /userPushTokens/{userId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    // =================================
    // Funções de Helper
    // =================================
    function isAuthor(authorId) {
      return request.auth.uid == authorId;
    }
    
    function isMember(congregationId) {
      return get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
    }
    
    function isAdmin(congregationId) {
       return get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN';
    }
  }
}