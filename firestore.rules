
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is an admin of a specific congregation
    function isAdminOf(congregationId) {
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userProfile.congregationId == congregationId && userProfile.congregationStatus == 'ADMIN';
    }
    
    // Helper function to check if a user is a member of a specific congregation
    function isMemberOf(congregationId) {
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userProfile.congregationId == congregationId && (userProfile.congregationStatus == 'MEMBER' || userProfile.congregationStatus == 'ADMIN' || userProfile.congregationStatus == 'APPROVED');
    }
    
    // Helper function to check if an update only modifies specific fields
    function isOnlyUpdating(fields) {
      return request.resource.data.keys().hasAll(fields) && request.resource.data.keys().hasOnly(fields);
    }
    
    // Allow an admin to update a user's status within their congregation
    function allowUserStatusUpdate(congregationId) {
      let isAdmin = isAdminOf(congregationId);
      let isChangingStatusForCongregation = request.resource.data.congregationId == congregationId;
      let validFields = ['congregationId', 'congregationStatus'];
      return isAdmin && isChangingStatusForCongregation && isOnlyUpdating(validFields);
    }

    // USER-related rules
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId && (
                       isOnlyUpdating(['onboardingCompleted', 'preferredLanguage']) || 
                       isOnlyUpdating(['displayName', 'photoURL']) || 
                       isOnlyUpdating(['onboardingCompleted']) || 
                       isOnlyUpdating(['preferredLanguage']) ||
                       (request.resource.data.congregationStatus == 'PENDING' && isOnlyUpdating(['congregationId', 'congregationStatus']))
                     ) ||
                     (isAdminOf(request.resource.data.congregationId) && isOnlyUpdating(['congregationId', 'congregationStatus']));
    }

    // PLANS-related rules
    match /users/{userId}/plans/{planId} {
      allow read, write: if request.auth.uid == userId;
    }

    // MESSAGES-related rules
    match /users/{userId}/messages/{messageId} {
      allow read, write: if request.auth.uid == userId;
    }
    
    // JOURNALS-related rules
    match /journals/{entryId} {
        allow read, update, delete: if resource.data.userId == request.auth.uid;
        allow create: if request.resource.data.userId == request.auth.uid;
    }

    // PRAYERS-related rules (Sanctuary)
    match /prayers/{prayerId} {
        allow read: if resource.data.userId == request.auth.uid;
        allow create: if request.resource.data.userId == request.auth.uid;
    }

    // PRAYER CIRCLES-related rules
    match /prayerCircles/{circleId} {
      allow read: if request.auth.uid in resource.data.members;
      allow create: if request.auth.uid in request.resource.data.members;
      allow update: if request.auth.uid in resource.data.members && request.resource.data.keys().hasOnly(['members']);
    }

    match /prayerRequests/{requestId} {
      allow read: if isMemberOf(resource.data.circleId);
      allow create: if isMemberOf(request.resource.data.circleId) && request.auth.uid == request.resource.data.authorId;
      allow update: if isMemberOf(resource.data.circleId) && request.resource.data.keys().hasOnly(['prayingUsers']);
    }
    
    // CONGREGATION-related rules
    match /congregations/{congregationId} {
      allow read: if isMemberOf(congregationId);
      allow create: if request.auth.uid == request.resource.data.createdBy;
      allow update: if isAdminOf(congregationId) && isOnlyUpdating(['memberCount']);
    }

    match /congregations/{congregationId}/members/{memberId} {
      allow read: if isMemberOf(congregationId);
      allow create: if request.auth.uid == memberId && request.resource.data.status == 'PENDING';
      
      // Admin actions: approve, reject, promote, remove
      allow update: if isAdminOf(congregationId) && 
                      (
                        // Approve
                        (request.resource.data.status == 'APPROVED' && isOnlyUpdating(['status', 'joinedAt'])) || 
                        // Promote
                        (request.resource.data.status == 'ADMIN' && isOnlyUpdating(['status']))
                      );
                      
      allow delete: if isAdminOf(congregationId) || request.auth.uid == memberId; // Admin can remove, or user can leave
    }

    match /congregations/{congregationId}/posts/{postId} {
        allow read: if isMemberOf(congregationId);
        allow create: if isMemberOf(congregationId) && request.auth.uid == request.resource.data.authorId;
        allow update: if isMemberOf(congregationId) && 
                         (
                           (request.auth.uid == resource.data.authorId && isOnlyUpdating(['content'])) || // Author can edit
                           (isOnlyUpdating(['likes', 'likeCount'])) || // Any member can like
                           (isOnlyUpdating(['commentCount'])) // System update for comments
                         );
        allow delete: if isAdminOf(congregationId) || request.auth.uid == resource.data.authorId; // Admin or author can delete
    }

    match /congregations/{congregationId}/posts/{postId}/comments/{commentId} {
        allow read, create: if isMemberOf(congregationId);
        allow update, delete: if isAdminOf(congregationId) || request.auth.uid == resource.data.authorId;
    }
    
    // SHARED CONTENT-related rules (Ponte da Esperan√ßa)
    match /sharedContent/{contentId} {
      allow read: if true; // Publicly readable
      allow create: if request.auth.uid == request.resource.data.creatorId;
      allow update: if isOnlyUpdating(['viewCount']); // Allow only view count to be incremented
    }
  }
}
