
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Verifica se o documento do usuário existe e se o campo 'role' é 'ADMIN'
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }

    match /users/{userId} {
      allow read;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }
    
    match /users/{userId}/plans/{planId} {
      allow read, write: if isOwner(userId);
    }
    
    match /users/{userId}/messages/{messageId} {
      allow read, write: if isOwner(userId);
    }

    match /users/{userId}/armors/{armorId} {
      allow read, create, update, delete: if isOwner(userId);
    }

    match /sharedArmors/{armorId} {
      allow read: if isSignedIn();
      // Only the original author can create, update or delete a shared armor
      allow create, update, delete: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
    
    match /journals/{journalId} {
      allow read, write: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    match /meditations/{meditationId} {
      allow read, write: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }
    
    match /feelingJourneys/{journeyId} {
      allow read, write: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    match /sharedContent/{contentId} {
        allow read;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
    }

    match /congregations/{congregationId} {
      allow read;
      allow create: if isSignedIn(); // Função 'createCongregation' gerencia as permissões
      allow update: if isSignedIn() && resource.data.admins[request.auth.uid] == true;
    }
    
    match /congregations/{congregationId}/members/{memberId} {
        allow read;
        allow write: if isSignedIn(); // Funções 'requestToJoin' e 'approve' gerenciam as permissões
    }
    
    match /congregations/{congregationId}/posts/{postId} {
        allow read: if isSignedIn();
        allow create, update: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        allow delete: if isSignedIn() && (
            resource.data.authorId == request.auth.uid || 
            get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true
        );
    }

    match /congregations/{congregationId}/posts/{postId}/{subcollection}/{docId} {
      allow read, write: if isSignedIn();
    }
    
    match /notifications/{notificationId} {
      allow read, update: if isSignedIn() && resource.data.recipientId == request.auth.uid;
      // Ninguém pode criar notificações diretamente, elas são criadas por Cloud Functions
      allow create, delete: if false;
    }

    match /userPushTokens/{userId} {
      allow read, write: if isOwner(userId);
    }

    match /articles/{articleId} {
      allow read: if resource.data.status == 'published' || isAdmin();
      allow create, update, delete: if isAdmin();
    }

    match /studies/{studyId} {
      allow read: if isSignedIn();
      allow write: if isAdmin(); // write engloba create, update, delete
    }

    match /podcasts/{podcastId} {
      allow read: if isSignedIn();
      allow write: if false; // Por enquanto, ninguém pode escrever diretamente
    }

    match /prayerCircles/{circleId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn(); // Lógica de membro é tratada no código
    }

    match /victories/{victoryId} {
      allow read: if isSignedIn();
      allow create, update: if isSignedIn();
    }

  }
}
