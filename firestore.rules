rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdminOf(congregationId) {
      return get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN';
    }

    function isMemberOf(congregationId) {
      let memberStatus = get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status;
      return memberStatus == 'MEMBER' || memberStatus == 'ADMIN';
    }

    // --- Collections Rules ---

    // Users can read/update their own profile.
    match /users/{userId} {
      allow read, update: if isAuth() && isOwner(userId);
      // Admins can update a user's congregation status.
      allow update: if isAuth() && isAdminOf(request.resource.data.congregationId);
    }
    
    // Journal, Plans, Meditations: Only owners can CRUD.
    match /journals/{entryId} {
      allow read, write, delete: if isAuth() && request.auth.uid == resource.data.userId;
    }
    
    match /users/{userId}/plans/{planId} {
        allow read, write: if isAuth() && isOwner(userId);
    }
    
    match /meditations/{meditationId} {
        allow read, write, delete: if isAuth() && request.auth.uid == resource.data.userId;
    }

    // Prayer Sanctuary: Owners can create, but not update/delete for history integrity.
    match /prayers/{prayerId} {
      allow read, create: if isAuth() && request.auth.uid == request.resource.data.userId;
      allow update, delete: if false; // Keep history immutable
    }

    // Prayer Circles & Requests
    match /prayerCircles/{circleId} {
      allow read: if isAuth() && request.auth.uid in resource.data.members;
      allow create: if isAuth() && request.auth.uid in request.resource.data.members;
      allow update: if isAuth() && (
        (request.auth.uid in resource.data.members && request.resource.data.keys().hasOnly(['members'])) || // Existing members can join others
        (request.auth.uid == resource.data.createdBy) // Creator can update other fields
      );
    }

    match /prayerRequests/{requestId} {
      allow read, create: if isAuth() && isMemberOf(request.resource.data.circleId);
      allow update: if isAuth() && isMemberOf(resource.data.circleId) && request.resource.data.keys().hasOnly(['prayingUsers']);
    }
    
    // Shared Content (Ponte da Esperança)
    match /sharedContent/{contentId} {
        // Anyone can read active content
        allow read: if resource.data.status == 'ACTIVE';
        // Only authenticated users can create
        allow create: if isAuth() && request.auth.uid == request.resource.data.creatorId;
        // Only creator can update viewCount (done via server) or status
        allow update: if isAuth() && request.auth.uid == resource.data.creatorId;
    }

    // Congregations and Sub-collections
    match /congregations/{congregationId} {
      allow get: if isAuth(); // Allow fetching for invite code verification
      allow read: if isAuth() && isMemberOf(congregationId);
      allow create: if isAuth() && request.auth.uid == request.resource.data.createdBy;
      
      // Posts sub-collection
      match /posts/{postId} {
        allow read: if isAuth() && isMemberOf(congregationId);
        allow create: if isAuth() && isMemberOf(congregationId) && request.auth.uid == request.resource.data.authorId;
        allow update: if isAuth() && isMemberOf(congregationId); // Simplificado para likes/comentários
      }

      // Comments sub-collection
      match /comments/{commentId} {
        allow read: if isAuth() && isMemberOf(congregationId);
        allow create: if isAuth() && isMemberOf(congregationId) && request.auth.uid == request.resource.data.authorId;
        allow update: if isAuth() && isMemberOf(congregationId) && (
          // Allow author to edit their own comment text
          (request.auth.uid == resource.data.authorId && request.resource.data.keys().hasOnly(['text'])) ||
          // Allow any member to update the reply count of any comment
          (request.resource.data.keys().hasOnly(['replyCount']))
        );
        allow delete: if isAuth() && (
          // Allow author to delete their own comment
          isOwner(resource.data.authorId) ||
          // Allow admin to delete any comment
          isAdminOf(congregationId)
        );
      }
      
      // Members sub-collection
      match /members/{userId} {
        allow read: if isAuth() && isMemberOf(congregationId);
        // Allow a user to create their OWN 'PENDING' request to join
        allow create: if isAuth() && isOwner(userId) && request.resource.data.status == 'PENDING';
        // Allow admin to update status, or any member to update their own info (future use)
        allow update: if isAuth() && (isAdminOf(congregationId) || isOwner(userId));
        // Allow admin to delete/reject, or a user to delete their own membership record
        allow delete: if isAuth() && (isAdminOf(congregationId) || isOwner(userId));
      }
    }
  }
}