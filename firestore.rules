rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow read, update: if isOwner(userId);
    }
    
    match /users/{userId}/armors/{armorId} {
      allow get, list: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth.uid == userId;
    }

    match /users/{userId}/plans/{planId} {
      allow read, write: if isOwner(userId);
    }

    match /users/{userId}/messages/{messageId} {
      allow read, write: if isOwner(userId);
    }
    
    match /feelingJourneys/{journeyId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read: if isOwner(resource.data.userId);
    }
    
    match /meditations/{meditationId} {
      allow create: if request.auth.uid == request.resource.data.userId;
      allow read: if isOwner(resource.data.userId);
    }

    match /journals/{journalId} {
      allow read, write: if isOwner(resource.data.userId);
    }
    
    match /prayers/{prayerId} {
      allow read, write: if isOwner(resource.data.userId);
    }

    match /sharedContent/{contentId} {
      allow read;
      allow create: if request.auth.uid != null;
      allow update: if isOwner(resource.data.creatorId);
    }

    match /prayerCircles/{circleId} {
      allow create: if request.auth.uid != null;
      allow read: if request.auth.uid in resource.data.members;
      allow update: if request.auth.uid in resource.data.members;
    }
    
    match /prayerRequests/{requestId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
      function isCircleMember(circleId) {
          return request.auth.uid in get(/databases/$(database)/documents/prayerCircles/$(circleId)).data.members;
      }
      allow read: if isCircleMember(resource.data.circleId);
      allow update: if isCircleMember(resource.data.circleId);
    }
    
    match /congregations/{congregationId} {
        allow read; 
        allow create: if request.auth.uid != null;
        
        function isCongregationAdmin(congregationId) {
            return get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true;
        }
        allow update: if isCongregationAdmin(congregationId);
        
        match /members/{memberId} {
            allow read: if request.auth.uid in get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins || request.auth.uid == memberId;
            allow create: if request.auth.uid != null;
            allow update, delete: if isCongregationAdmin(congregationId) || request.auth.uid == memberId;
        }

        match /posts/{postId} {
            allow read: if request.auth.uid in resource.data.members || get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true;
            allow create: if request.auth.uid == request.resource.data.authorId;
            allow update, delete: if request.auth.uid == resource.data.authorId || isCongregationAdmin(congregationId);
        
            match /comments/{commentId} {
                 allow read: if request.auth.uid in get(/databases/$(database)/documents/congregations/$(congregationId)).data.members || get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true;
                 allow create: if request.auth.uid == request.resource.data.authorId;
                 allow update, delete: if request.auth.uid == resource.data.authorId;
            }
            
            match /likes/{likeId} {
                allow read: if request.auth.uid in get(/databases/$(database)/documents/congregations/$(congregationId)).data.members || get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true;
                allow create, delete: if request.auth.uid == likeId;
            }
        }
    }
    
    match /articles/{articleId} {
        allow read: if resource.data.status == 'published' || (request.auth.uid != null && request.auth.uid == resource.data.authorId);
        allow create, update: if request.auth.uid == request.resource.data.authorId;
        allow delete: if request.auth.uid == resource.data.authorId;
    }
    
    match /userPushTokens/{userId} {
        allow read, write: if request.auth.uid == userId;
    }

    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.recipientId;
    }
  }
}
