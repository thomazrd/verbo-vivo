
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdminOf(congregationId) {
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userProfile.congregationId == congregationId && userProfile.congregationStatus == 'ADMIN';
    }

    function isMemberOf(congregationId) {
      // Check if user is an approved member of the congregation
      let memberDoc = get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data;
      return memberDoc.status == 'APPROVED' || memberDoc.status == 'ADMIN';
    }

    function isSameUser(user) {
      return request.auth.uid == user.id;
    }

    // --- Collection Rules ---

    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create; // Anyone can create a user doc during sign-up
      
      // Allow an admin to update a user's status to approve them
      allow update: if isAdminOf(request.resource.data.congregationId) 
                      && request.resource.data.congregationStatus == 'MEMBER'
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['congregationStatus']);
                      
      // Allow an admin to update a user's status to reject/remove them
      allow update: if isAdminOf(resource.data.congregationId)
                      && request.resource.data.congregationStatus == 'NONE'
                      && request.resource.data.congregationId == null
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['congregationId', 'congregationStatus']);

      // Allow an admin to promote another user
       allow update: if isAdminOf(request.resource.data.congregationId)
                      && request.resource.data.congregationStatus == 'ADMIN'
                      && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['congregationStatus']);
    }

    match /congregations/{congregationId} {
      allow read: if isMemberOf(congregationId);
      allow create: if request.auth.uid != null;
      allow update: if isAdminOf(congregationId); // Admins can update congregation details & memberCount

      match /members/{memberId} {
        allow read: if isMemberOf(congregationId);
        allow create: if request.auth.uid == memberId; // User can request to join
        allow update, delete: if isAdminOf(congregationId); // Admins can approve/reject/remove/promote
      }
      
      match /posts/{postId} {
        allow read: if isMemberOf(congregationId);
        allow create: if isMemberOf(congregationId);
        allow update: if isMemberOf(congregationId) && (
                        // User can like/unlike a post
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount']) ||
                        // User can comment
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['commentCount'])
                      );

        match /comments/{commentId} {
            allow read, create: if isMemberOf(congregationId);
        }
      }
    }

    match /journals/{entryId} {
        allow read, update, delete: if isOwner(resource.data.userId);
        allow create: if isOwner(request.resource.data.userId);
    }
    
    match /prayerCircles/{circleId} {
      allow read, update: if request.auth.uid in resource.data.members;
      allow create: if request.auth.uid in request.resource.data.members;
    }

    match /prayerRequests/{requestId} {
      // Must be a member of the circle to read or create
      allow read, create: if get(/databases/$(database)/documents/prayerCircles/$(request.resource.data.circleId)).data.members.hasAny([request.auth.uid]);
      // Any member of the circle can update (to pray)
      allow update: if get(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)).data.members.hasAny([request.auth.uid]);
    }

    match /prayers/{prayerId} {
      // Users can only access their own prayers
      allow read: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }

     match /sharedContent/{contentId} {
      allow read; // Anyone with the link can read
      allow create: if request.auth.uid != null;
      allow update: if isOwner(resource.data.creatorId);
    }
    
  }
}
