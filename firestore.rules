rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    match /journals/{journalId} {
      allow read, write, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    match /plans/{planId} {
    	allow read, write, delete: if false;
    }
    
    match /users/{userId}/plans/{planId} {
    	allow read, write, delete: if isOwner(userId);
    }
    
     match /meditations/{meditationId} {
      allow read, write, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
    
    match /feelingJourneys/{journeyId} {
      allow read, write, delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    match /sharedContent/{contentId} {
      allow read: if resource.data.status == 'ACTIVE';
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
                      resource.data.creatorId == request.auth.uid || 
                      request.resource.data.viewCount == resource.data.viewCount + 1
                    );
    }

    match /prayerCircles/{circleId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.members;
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.createdBy;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.members;
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.createdBy;
    }

    match /prayerRequests/{requestId} {
      function isCircleMember() {
        let circleId = get(/databases/$(database)/documents/prayerRequests/$(requestId)).data.circleId;
        return request.auth.uid in get(/databases/$(database)/documents/prayerCircles/$(circleId)).data.members;
      }
      allow read, create: if isAuthenticated() && isCircleMember();
      allow update, delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      // Allow any member to update the prayingUsers array
      allow update: if isAuthenticated() && isCircleMember() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['prayingUsers']);
    }

    match /notifications/{notificationId} {
    	allow read, update: if isAuthenticated() && resource.data.recipientId == request.auth.uid;
    }

    match /userPushTokens/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    match /congregations/{congregationId} {
      allow read: if isAuthenticated();
      // Only authenticated users can create. Further logic handled by Cloud Functions.
      allow create: if isAuthenticated();
      // Only admins can update general info. Logic in Cloud Function.
      allow update: if isAuthenticated();
      // Deletion might be restricted to project owner or a special role.
      allow delete: if false; 
    }
    
    match /congregations/{congregationId}/members/{userId} {
      allow read: if isAuthenticated();
       // Only admins can update member status. Logic in Cloud Function.
      allow write: if isAuthenticated();
    }
    
    match /congregations/{congregationId}/posts/{postId} {
      function isCongregationMember(congId) {
        return exists(/databases/$(database)/documents/congregations/$(congId)/members/$(request.auth.uid));
      }
      
      allow read: if isAuthenticated() && isCongregationMember(congregationId);
      allow create: if isAuthenticated() && isCongregationMember(congregationId) && request.resource.data.authorId == request.auth.uid;
      allow update: if isAuthenticated() && (
                      (isCongregationMember(congregationId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'likeCount'])) ||
                      (resource.data.authorId == request.auth.uid)
                    );
      allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
    }
    
    match /congregations/{congregationId}/posts/{postId}/comments/{commentId} {
       function isCongregationMember(congId) {
        return exists(/databases/$(database)/documents/congregations/$(congId)/members/$(request.auth.uid));
      }

      allow read: if isAuthenticated() && isCongregationMember(congregationId);
      allow create: if isAuthenticated() && isCongregationMember(congregationId) && request.resource.data.authorId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
    }

    match /congregations/{congregationId}/posts/{postId}/likes/{userId} {
       function isCongregationMember(congId) {
        return exists(/databases/$(database)/documents/congregations/$(congId)/members/$(request.auth.uid));
      }
      
      allow read: if isAuthenticated() && isCongregationMember(congregationId);
      allow write: if isAuthenticated() && isCongregationMember(congregationId) && request.auth.uid == userId;
    }

    match /articles/{articleId} {
      allow read: if resource.data.status == 'published';
      // Admins and owners can read drafts
      allow read: if isAuthenticated() && request.auth.uid == resource.data.authorId;
      
      allow create: if isAuthenticated(); // Further validation in-app or via functions
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.authorId;
    }
    
    match /users/{userId}/armors/{armorId} {
      allow read, write, delete: if isOwner(userId);
    }
    
    match /sharedArmors/{armorId} {
      allow read: if isAuthenticated();
      // Only the owner can write to the shared collection.
      allow write: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
  }
}
