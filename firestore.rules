rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // --- Funções de Autenticação e Permissão ---

// Verifica se o usuário está logado.
function isSignedIn() {
  return request.auth != null;
}

// Verifica se o usuário logado é o dono do documento.
// Ex: `isUser(userId)` em `match /users/{userId}`
function isUser(userId) {
  return isSignedIn() && request.auth.uid == userId;
}

// Verifica se o usuário é um membro de uma congregação específica.
function isCongregationMember(congregationId) {
    return isSignedIn() && get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'MEMBER';
}

// Verifica se o usuário é um administrador de uma congregação específica.
function isCongregationAdmin(congregationId) {
    return isSignedIn() && get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true;
}

// Verifica se o usuário tem a função de ADMIN no seu perfil.
function isAdmin() {
    return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
}

    // --- From: validation.rules ---
// Funções para validar dados antes da escrita/atualização

// Valida se um campo de string não está vazio
function isNotEmpty(value) {
  return value.size() > 0;
}

// Valida o tamanho de uma string
function hasMaxLength(value, max) {
  return value.size() <= max;
}

    // From: articles.rules
match /articles/{articleId} {
  // Leitura: Qualquer um pode ler artigos publicados.
  allow read: if resource.data.status == 'published';

  // Criação, Atualização, Exclusão: Apenas administradores.
  allow write: if isAdmin();
}

    // From: battlePlans.rules
// collections/battlePlans.rules

match /battlePlans/{planId} {
  // Leitura: Qualquer usuário autenticado pode ler planos publicados OU se for o criador do plano.
  allow read: if isSignedIn() && (resource.data.status == 'PUBLISHED' || resource.data.creatorId == request.auth.uid);

  // Criação: Qualquer usuário autenticado pode criar um plano (será um líder).
  allow create: if isSignedIn();

  // Atualização e Exclusão: Apenas o criador original do plano pode modificar ou apagar.
  allow update, delete: if isSignedIn() && resource.data.creatorId == request.auth.uid;
}
    // From: congregations.rules
match /congregations/{congregationId} {
    // Leitura: Qualquer usuário autenticado pode ver os detalhes de uma congregação.
    allow read: if isSignedIn();
    // Criação: Apenas usuários autenticados que não estão em uma congregação podem criar.
    allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
    // Atualização: Apenas administradores da congregação.
    allow update: if isCongregationAdmin(congregationId);

    // Membros
    match /members/{userId} {
        // Leitura: Membros podem ver a lista de outros membros.
        allow read, list: if isCongregationMember(congregationId);
        // Criação: Um usuário pode solicitar a entrada (criar seu próprio doc de membro).
        allow create: if isUser(userId);
        // Atualização: Admins podem mudar o status dos membros (aprovar, etc.).
        allow update: if isCongregationAdmin(congregationId);
        // Exclusão: Um admin pode remover um membro, ou um usuário pode sair.
        allow delete: if isCongregationAdmin(congregationId) || isUser(userId);
    }

    // Posts
    match /posts/{postId} {
        // Leitura: Apenas membros da congregação.
        allow read: if isCongregationMember(congregationId);
        // Criação: Apenas membros da congregação.
        allow create: if isCongregationMember(congregationId) && request.resource.data.authorId == request.auth.uid;
        // Atualização e Exclusão: Apenas o autor do post.
        allow update, delete: if get(/databases/$(database)/documents/congregations/$(congregationId)/posts/$(postId)).data.authorId == request.auth.uid;

        // Comentários
        match /comments/{commentId} {
             allow read: if isCongregationMember(congregationId);
             allow create: if isCongregationMember(congregationId) && request.resource.data.authorId == request.auth.uid;
             allow update, delete: if get(/databases/$(database)/documents/congregations/$(congregationId)/posts/$(postId)/comments/$(commentId)).data.authorId == request.auth.uid;
        }

        // Likes
        match /likes/{userId} {
            allow read: if isCongregationMember(congregationId);
            // Um usuário só pode criar ou deletar seu próprio like.
            allow create, delete: if isUser(userId) && isCongregationMember(congregationId);
        }
    }
}
    // From: content.rules
match /content/{contentId} {
  // Leitura: Qualquer usuário pode ler conteúdos publicados.
  allow read: if resource.data.status == 'PUBLISHED';
  
  // Criação, Atualização, Exclusão: Apenas administradores.
  allow create, update, delete: if isAdmin();
}
    // From: feelingJourneys.rules
match /feelingJourneys/{journeyId} {
    // Um usuário só pode ler e escrever suas próprias jornadas de sentimentos.
    allow read, write: if isUser(request.resource.data.userId);
}
    // From: journals.rules
match /journals/{journalId} {
  // O usuário só pode ler, criar, editar e apagar suas próprias entradas no diário.
  allow read, write: if isUser(request.resource.data.userId);
}

    // From: missionLogs.rules
// collections/missionLogs.rules

match /missionLogs/{logId} {
  // O usuário só pode ler e escrever seus próprios logs de missão.
  allow read, write: if isUser(request.resource.data.userId);
}
    // From: notifications.rules
match /notifications/{notificationId} {
    // Um usuário só pode ler e atualizar (marcar como lida) suas próprias notificações.
    allow read, update: if isUser(resource.data.recipientId);
    // Ninguém pode criar ou deletar notificações diretamente. Elas são criadas por Cloud Functions.
    allow create, delete: if false;
}
    // From: prayerCircles.rules
// Regras para a coleção "prayerCircles"

match /prayerCircles/{circleId} {
  // Leitura: Qualquer membro do círculo pode ler seus detalhes.
  //          Qualquer usuário autenticado pode ler se for público.
  allow read: if isSignedIn() && (resource.data.isPublic == true || request.auth.uid in resource.data.members);
  
  // Criação: Qualquer usuário autenticado pode criar um círculo.
  allow create: if isSignedIn();
  
  // Atualização e Exclusão: Apenas o criador do círculo.
  allow update, delete: if isSignedIn() && resource.data.createdBy == request.auth.uid;
}
    // From: sharedArmors.rules
match /sharedArmors/{armorId} {
  // Leitura: Qualquer usuário autenticado pode ler armaduras compartilhadas.
  allow read: if isSignedIn();
  // Criação: Um usuário pode compartilhar uma armadura (criar doc), desde que seja o autor.
  allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
  // Atualização/Exclusão: Apenas o autor original pode atualizar ou remover o compartilhamento.
  allow update, delete: if isSignedIn() && get(/databases/$(database)/documents/sharedArmors/$(armorId)).data.userId == request.auth.uid;
}

    // From: sharedContent.rules
match /sharedContent/{contentId} {
  // Qualquer pessoa pode ler o conteúdo compartilhado, mesmo sem estar logado.
  allow read;
  // Apenas usuários autenticados podem criar conteúdo.
  allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
  // Apenas o criador pode atualizar (ex: mudar status para DELETED).
  allow update: if isSignedIn() && get(/databases/$(database)/documents/sharedContent/$(contentId)).data.creatorId == request.auth.uid;
  // Ninguém pode deletar diretamente para manter o registro.
  allow delete: if false;
}

    // From: studies.rules
match /studies/{studyId} {
  // Leitura: Qualquer um pode ler estudos publicados, mesmo não autenticado.
  allow read: if resource.data.status == 'PUBLISHED';
  
  // Criação, Atualização, Exclusão: Apenas administradores.
  allow write: if isAdmin();
}
    // From: suggestions.rules
match /suggestions/{suggestionId} {
  // Criação: Qualquer usuário autenticado pode criar uma sugestão.
  allow create: if isSignedIn() && request.resource.data.submittedBy == request.auth.uid;
  
  // Leitura, Atualização, Exclusão: Apenas administradores podem gerenciar sugestões.
  allow read, update, delete: if isAdmin();
}
    // From: userPushTokens.rules
match /userPushTokens/{tokenId} {
    // Um usuário só pode criar ou deletar seu próprio token.
    allow create, delete: if isUser(request.resource.data.userId);
    // Ninguém deve ser capaz de ler os tokens de outros.
    allow read, update: if false;
}
    // From: users.rules
match /users/{userId} {
  // Leitura: Qualquer usuário autenticado pode ler perfis públicos.
  // Escrita: O próprio usuário ou um administrador podem escrever.
  allow read: if isSignedIn();
  allow write: if isUser(userId) || isAdmin();

  // Regras para subcoleções de 'users' (ex: planos de estudo, armaduras)
  // Geralmente, o usuário só pode acessar seus próprios dados.
  match /plans/{planId} {
    allow read, write, delete: if isUser(userId);
  }

  match /armors/{armorId} {
    allow read, write, delete: if isUser(userId);
  }

  match /battlePlans/{userPlanId} {
    // A leitura do progresso do usuário pode ser permitida para o líder do plano.
    allow read: if isUser(userId) || 
                (isSignedIn() && resource.data.consentToShareProgress == true && get(/databases/$(database)/documents/battlePlans/$(resource.data.planId)).data.creatorId == request.auth.uid);
    allow create, update, delete: if isUser(userId);
  }
}

    // From: victories.rules
// Regras para a coleção "victories"

match /victories/{victoryId} {
  // Leitura: Qualquer usuário autenticado pode ler as vitórias.
  allow read: if isSignedIn();
  
  // Criação: O criador do círculo de oração pode registrar uma vitória.
  allow create: if isSignedIn() && get(/databases/$(database)/documents/prayerCircles/$(request.resource.data.circleId)).data.createdBy == request.auth.uid;
  
  // Atualização: Um usuário autenticado pode dar "Amém" (atualizar o array de usersWhoSaidAmen).
  // Não permita outras atualizações para manter a integridade do testemunho.
  allow update: if isSignedIn() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['usersWhoSaidAmen', 'amenCount']);
  
  // Exclusão: Apenas o moderador que registrou a vitória pode excluí-la.
  allow delete: if isSignedIn() && resource.data.recordedBy == request.auth.uid;
}

  }
}