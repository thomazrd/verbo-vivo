
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users can read their own profile, and other users can read public fields.
    // Users can only create/update their own profile.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);

      // --- Minha Armadura ---
      // Users can manage their own armors.
      match /armors/{armorId} {
        allow read, write, delete: if isOwner(userId);
      }
    }
    
    // Shared armors can be read by anyone, but only managed by the owner.
    match /sharedArmors/{armorId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow delete: if isAuthenticated() && isOwner(resource.data.userId);
    }
    
    // Notifications are private to the recipient
    match /notifications/{notificationId} {
        allow read, write: if isAuthenticated() && isOwner(request.resource.data.recipientId);
        allow create: if isAuthenticated(); // More complex logic might be needed here, handled by Cloud Functions
    }
    
    // User push tokens are private
    match /userPushTokens/{userId} {
        allow read, write: if isOwner(userId);
    }

    // Journal entries are private
    match /journals/{journalId} {
        allow read, write, delete: if isAuthenticated() && isOwner(resource.data.userId);
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }

    // Feeling Journeys are private
    match /feelingJourneys/{journeyId} {
      allow read, create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // Confessions are private and cannot be read back
    match /confessions/{confessionId} {
      allow read: if false; // Data is write-only for privacy
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // Meditations are private
    match /meditations/{meditationId} {
        allow read, write, delete: if isAuthenticated() && isOwner(resource.data.userId);
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // Prayers are private
    match /prayers/{prayerId} {
        allow read, write, delete: if isAuthenticated() && isOwner(resource.data.userId);
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }

    // Shared content is public read, but only owner can create/delete
     match /sharedContent/{contentId} {
      allow read: if true;
      allow create: if isAuthenticated() && isOwner(request.resource.data.creatorId);
      allow update: if isAuthenticated() && isOwner(resource.data.creatorId);
    }

    // --- Community Rules ---
    match /congregations/{congregationId} {
      allow get: if isAuthenticated();
      allow list: if isAuthenticated();
      // Write logic is handled by Cloud Functions for security
      allow create, update, delete: if false; 

      match /members/{memberId} {
        allow read: if isAuthenticated();
        // Write logic is handled by Cloud Functions for security
        allow create, update, delete: if false; 
      }
      
      match /posts/{postId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
        // Only author can update/delete
        allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);

        match /likes/{userId} {
          allow read: if isAuthenticated();
          allow create, delete: if isOwner(userId);
        }
        
        match /comments/{commentId} {
          allow read: if isAuthenticated();
          allow create: if isAuthenticated() && isOwner(request.resource.data.authorId);
          allow update, delete: if isAuthenticated() && isOwner(resource.data.authorId);

          match /likes/{userId} {
            allow read: if isAuthenticated();
            allow create, delete: if isOwner(userId);
          }
        }
      }
    }
    
    // Public read for articles
    match /articles/{articleId} {
      allow read: if resource.data.status == 'published';
      // Allow create/update/delete only for authenticated users (further checks in-app)
      allow write: if isAuthenticated();
    }
    
    // --- Prayer Circles Rules ---
    match /prayerCircles/{circleId} {
      // Allow reads if public or user is a member
      allow read: if isAuthenticated() && (resource.data.isPublic == true || request.auth.uid in resource.data.members);
      
      // Allow creation for any authenticated user
      allow create: if isAuthenticated() && isOwner(request.resource.data.createdBy);

      // Allow updates only by the creator (e.g., to add members, change description) or by any member to join/leave praying
      allow update: if isAuthenticated() && (
                      isOwner(resource.data.createdBy) ||
                      (request.auth.uid in resource.data.members)
                    );
    }
    
    match /victories/{victoryId} {
      allow read: if isAuthenticated();
      // Amen action is an update
      allow update: if isAuthenticated(); 
      // Only the circle moderator can create a victory testimony
      allow create: if isAuthenticated() && isOwner(request.resource.data.recordedBy);
    }

  }
}
