rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      // Perfil pode ser lido por qualquer um (para ver nomes/fotos de autores)
      allow read: if true;
      // Usuário só pode escrever no seu próprio perfil
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /notifications/{notificationId} {
        // Usuário só pode ler/escrever suas próprias notificações
        allow read, write: if request.auth != null && request.auth.uid == resource.data.recipientId;
    }
    
    match /userPushTokens/{userId} {
        // Usuário só pode gerenciar seus próprios tokens
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /plans/{planId} {
      // Documentos de planos são aninhados, a regra abaixo lida com isso.
    }
    
    match /journals/{journalId} {
      // Documentos de diário são aninhados, a regra abaixo lida com isso.
    }
    
    match /meditations/{meditationId} {
        // Acesso restrito ao próprio usuário
        allow read, write, create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    match /prayers/{prayerId} {
        // Acesso restrito ao próprio usuário
        allow read, write, create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    match /users/{userId}/{collection}/{docId} {
        // Regra genérica para subcoleções de usuários (plans, messages, etc.)
        // Permite que o usuário acesse apenas suas próprias subcoleções.
        allow read, write, create, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    match /sharedContent/{contentId} {
        // Conteúdo compartilhado pode ser lido por qualquer um
        allow read: if true;
        // Apenas o criador pode criar/atualizar/deletar
        allow create, update, delete: if request.auth != null && request.auth.uid == request.resource.data.creatorId;
    }
    
    match /congregations/{congregationId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null; // A lógica de criação é validada na Cloud Function
        allow update: if request.auth != null && request.auth.uid in resource.data.admins;
    }
    
    match /congregations/{congregationId}/{subcollection}/{docId} {
        // Membros da congregação podem ler tudo
        allow read: if request.auth != null && exists(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid));
        
        // Regras de escrita mais granulares
        // Posts: Apenas membros podem criar. Autor do post pode deletar/editar.
        match /posts/{postId} {
             allow create: if request.auth != null && exists(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid));
             allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
        }
        
        // Comentários: Apenas membros podem criar. Autor pode deletar/editar.
        match /posts/{postId}/comments/{commentId} {
            allow create: if request.auth != null && exists(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid));
            allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
        }
        
        // Likes: Apenas membros podem criar/deletar (liking/unliking).
        match /posts/{postId}/likes/{userId} {
             allow create, delete: if request.auth != null && request.auth.uid == userId && exists(/databases/$(database)/documents/congregations/$(congregationId)/members/$(userId));
        }

        // Membros: Admin pode gerenciar. Usuário pode ver a lista de membros.
        match /members/{userId} {
            allow read: if request.auth != null && exists(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid));
            allow create: if request.auth != null && request.auth.uid == userId; // O próprio usuário solicita entrada
            allow update, delete: if request.auth != null && get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true;
        }
    }
    
    match /articles/{articleId} {
      // Artigos publicados podem ser lidos por todos. Rascunhos só pelo autor.
      allow read: if resource.data.status == 'published' || (request.auth != null && request.auth.uid == resource.data.authorId);
      // Apenas o autor (que deve ser admin) pode escrever/deletar.
      allow write, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }
    
    match /sharedArmors/{armorId} {
        allow read: if request.auth != null;
        allow write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /prayerCircles/{circleId} {
        // Permite a consulta da lista de círculos por qualquer usuário autenticado.
        allow list: if request.auth != null;
        
        // Permite a leitura de um círculo específico se ele for público ou se o usuário for membro.
        allow read: if request.auth != null && (resource.data.isPublic == true || request.auth.uid in resource.data.members);
        
        // Permite a criação se o criador for o próprio usuário e estiver na lista de membros.
        allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid && request.auth.uid in request.resource.data.members;
        
        // Permite a atualização do círculo (ex: adicionar membros, mudar nome) por um membro.
        allow update: if request.auth != null && request.auth.uid in resource.data.members;
    }

    match /prayerRequests/{requestId} {
      // Qualquer usuário autenticado pode ler os pedidos de oração.
      // A segurança de qual círculo o usuário pode ver é controlada pela regra de 'prayerCircles'.
      allow read: if request.auth != null;

      // Permite criar e atualizar/deletar se o usuário for o autor.
      allow write: if request.auth != null && request.resource.data.authorId == request.auth.uid;
    }
  }
}
