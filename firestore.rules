
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read/write their own profile
    match /users/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid == userId;
    }

    // Journal entries are private to the user
    match /journals/{entryId} {
        allow read, write: if request.auth.uid == request.resource.data.userId;
    }

    // Plans are private to the user
    match /users/{userId}/plans/{planId} {
        allow read, write: if request.auth.uid == userId;
    }

    // Chat messages are private to the user
    match /users/{userId}/messages/{messageId} {
        allow read, write: if request.auth.uid == userId;
    }

    // Meditations are private
    match /meditations/{meditationId} {
        allow read, write: if request.auth.uid == request.resource.data.userId;
    }
    
    // Prayer sanctuary entries are private
    match /prayers/{prayerId} {
      allow read, write: if request.auth.uid == request.resource.data.userId;
    }

    // Notifications are private to the recipient
    match /notifications/{notificationId} {
        allow read, update: if request.auth.uid == resource.data.recipientId;
        allow create: if request.auth != null; // Can be created by functions
    }
    
    // User push tokens can only be managed by the user themselves
    match /userPushTokens/{userId} {
        allow read, write: if request.auth.uid == userId;
    }

    // Shared content is public to read
    match /sharedContent/{contentId} {
      allow get; // Anyone with the link can read
      allow list, write: if request.auth != null; // Logged-in users can create
    }
    
    // Prayer circles
    match /prayerCircles/{circleId} {
        // Anyone logged in can create a circle
        allow create: if request.auth != null;
        // Only members can read the circle's info
        allow read: if request.auth.uid in resource.data.members;
        // Logged-in users can update (join), but only members can modify other things
        allow update: if request.auth != null;
    }

    // Prayer requests
    match /prayerRequests/{requestId} {
      allow create: if request.auth != null;
      allow read: if get(/databases/$(database)/documents/prayerCircles/$(request.resource.data.circleId)).data.members.hasAny([request.auth.uid]);
      allow update: if get(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)).data.members.hasAny([request.auth.uid]);
    }
    
    // Congregations can be created by any authenticated user
    match /congregations/{congregationId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth.uid in resource.data.admins;
    }
    
    // Congregation members
    match /congregations/{congregationId}/members/{userId} {
        // Any authenticated user can request to join (create a PENDING doc)
        allow create: if request.auth != null && request.auth.uid == userId;
        // Any member of the congregation can see other members
        allow read: if get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true ||
                      get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'MEMBER';
        // Only admins can update status (approve, promote)
        allow update: if get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true;
        // Only admins or the user themselves can delete their membership
        allow delete: if get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true || request.auth.uid == userId;
    }

    // Posts, comments, likes within a congregation
    match /congregations/{congregationId}/{collection}/{docId} {
       // Members can read all content, any logged in user can create a post
       allow read: if get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
       // Any member of the congregation can create posts/comments/likes
       allow create: if get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
       // Users can only edit/delete their own content
       allow update, delete: if request.auth.uid == resource.data.authorId;
    }
    
    // Articles (Blog)
    match /articles/{articleId} {
      // Anyone can read published articles
      allow get: if resource.data.status == 'published';
      // Logged in users can list published articles
      allow list: if request.auth != null && resource.data.status == 'published';
      // Any authenticated user can create (starts as draft)
      allow create: if request.auth != null;
      // Only the author can update/delete their own articles
      allow update, delete: if request.auth.uid == resource.data.authorId;
    }
    
    // Armors (Private User Collection)
    match /users/{userId}/armors/{armorId} {
        allow read: if request.auth.uid == userId;
        allow write: if request.auth.uid == userId;
    }

    // Shared Armors (Public Collection)
    match /sharedArmors/{armorId} {
      // Any authenticated user can read shared armors
      allow read: if request.auth != null;
      // Only the original author can create, update, or delete the shared copy
      allow write: if request.auth.uid == request.resource.data.userId;
    }

  }
}
