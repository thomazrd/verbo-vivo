rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // --- Funções Auxiliares ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isCongregationMember(congregationId) {
        return get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
    }

    function isAdminOfCongregation(congregationId) {
      // Verifica se o documento de membro existe e se o status é ADMIN
      let memberDoc = get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid));
      return memberDoc.data.status == 'ADMIN';
    }

    // --- Coleções ---
    match /users/{userId} {
      allow read: if isUserAuthenticated() && isOwner(userId);
      allow create: if isUserAuthenticated() && isOwner(userId);
      // Permite atualização do próprio perfil OU se o solicitante for um admin da congregação alvo.
      allow update: if isUserAuthenticated() && (
        isOwner(userId) || (request.resource.data.congregationId != null && isAdminOfCongregation(request.resource.data.congregationId))
      );
    }
    
    match /journals/{journalId} {
      allow read, write: if isUserAuthenticated() && isOwner(resource.data.userId);
    }

    match /meditations/{meditationId} {
        allow read, write: if isUserAuthenticated() && isOwner(resource.data.userId);
    }

    match /plans/{planId} {
      // This is inside a user's collection, so we need to use a wildcard
      match /users/{userId}/plans/{planId} {
        allow read, write: if isUserAuthenticated() && isOwner(userId);
      }
    }
    
    match /messages/{messageId} {
       // This is inside a user's collection
       match /users/{userId}/messages/{messageId} {
         allow read, write: if isUserAuthenticated() && isOwner(userId);
       }
    }
    
    match /prayerCircles/{circleId} {
        allow read: if isUserAuthenticated() && request.auth.uid in resource.data.members;
        allow create: if isUserAuthenticated();
        allow update: if isUserAuthenticated() && request.auth.uid in resource.data.members;
    }

    match /prayerRequests/{requestId} {
        allow read, create: if isUserAuthenticated() && get(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)).data.members.hasAny([request.auth.uid]);
        allow update: if isUserAuthenticated() && get(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)).data.members.hasAny([request.auth.uid]);
    }
    
    match /sharedContent/{contentId} {
        allow read;
        allow create: if isUserAuthenticated();
        allow update: if isUserAuthenticated() && isOwner(resource.data.creatorId);
    }

    match /congregations/{congregationId} {
      // Qualquer usuário autenticado pode pesquisar por congregações (essencial para o 'join by code').
      allow list: if isUserAuthenticated();
      // Apenas membros podem ler os detalhes da congregação.
      allow get: if isUserAuthenticated() && isCongregationMember(congregationId);
      allow create: if isUserAuthenticated();
      allow update: if isUserAuthenticated() && isAdminOfCongregation(congregationId);
      
      // Regras para subcoleções de congregação
      
      match /members/{userId} {
        allow read: if isUserAuthenticated() && isCongregationMember(congregationId);
        // Permite que um usuário crie seu próprio pedido de entrada (com status 'PENDING').
        allow create: if isUserAuthenticated() && isOwner(userId) && request.resource.data.status == 'PENDING';
        // Permite que admins atualizem/removam membros, e que membros se removam.
        allow update, delete: if isUserAuthenticated() && (isAdminOfCongregation(congregationId) || isOwner(userId));
      }

      match /posts/{postId} {
          allow read, create, update, delete: if isUserAuthenticated() && isCongregationMember(congregationId);
          
          match /comments/{commentId} {
              allow read, create, update, delete: if isUserAuthenticated() && isCongregationMember(congregationId);
          }
          match /likes/{userId} {
              allow read, create, delete: if isUserAuthenticated() && isCongregationMember(congregationId);
          }
      }
    }

    match /notifications/{notificationId} {
      allow read, update: if isUserAuthenticated() && isOwner(resource.data.recipientId);
    }

    match /userPushTokens/{userId} {
      allow read, write: if isUserAuthenticated() && isOwner(userId);
    }

    match /wisdomPearls/{pearlId} {
      // Permite que qualquer cliente (mesmo não autenticado) leia as pérolas, 
      // mas apenas administradores (gerenciados via IAM/manualmente) podem escrever.
      allow read: if true;
      allow write: if false; // Gerenciado por administradores fora das regras do cliente
    }
  }
}