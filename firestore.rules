rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Funções Auxiliares ---
    function isUserAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isCongregationMember(congregationId) {
        let memberStatus = get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status;
        return memberStatus == 'MEMBER' || memberStatus == 'ADMIN';
    }
    
    function isAdminOfCongregation(congregationId) {
        return get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN';
    }

    // --- Regras por Coleção ---

    // Coleção de Usuários
    match /users/{userId} {
      allow get: if isUserAuthenticated() && isOwner(userId);
      allow create: if isUserAuthenticated();
      // Permite atualização se for o dono ou um admin da congregação do usuário
      allow update: if isUserAuthenticated() && (
          isOwner(userId) || 
          (request.resource.data.congregationId != null && isAdminOfCongregation(request.resource.data.congregationId))
      );
      allow delete: if false; // Geralmente, não se deleta perfis, apenas se desativa
    }
    
    // Coleção de Congregações
    match /congregations/{congregationId} {
      allow list: if isUserAuthenticated();
      allow get: if isUserAuthenticated() && isCongregationMember(congregationId);
      allow create: if isUserAuthenticated();
      allow update: if isUserAuthenticated() && isAdminOfCongregation(congregationId);

      // Subcoleção de Membros
      match /members/{userId} {
        allow read, write: if isUserAuthenticated() && (isOwner(userId) || isAdminOfCongregation(congregationId));
        allow create: if isUserAuthenticated(); // Usuário solicita entrada
      }

      // Subcoleção de Posts
      match /posts/{postId} {
        allow read, write: if isUserAuthenticated() && isCongregationMember(congregationId);

        // Subcoleção de Comentários
        match /comments/{commentId} {
          allow read, write: if isUserAuthenticated() && isCongregationMember(congregationId);
        }

        // Subcoleção de Likes
        match /likes/{userId} {
           allow read: if isUserAuthenticated() && isCongregationMember(congregationId);
           allow create, delete: if isUserAuthenticated() && isOwner(userId) && isCongregationMember(congregationId);
        }
      }
    }
    
    // Coleções do Usuário (Diário, Planos, etc.)
    match /journals/{entryId} {
        allow read, write: if isUserAuthenticated() && request.auth.uid == resource.data.userId;
    }
    match /users/{userId}/plans/{planId} {
        allow read, write: if isUserAuthenticated() && isOwner(userId);
    }
    match /users/{userId}/messages/{messageId} {
        allow read, write: if isUserAuthenticated() && isOwner(userId);
    }

    // Coleção de Orações
    match /prayers/{prayerId} {
      allow read, create: if isUserAuthenticated() && request.auth.uid == request.resource.data.userId;
    }
    
    // Coleção de Notificações
    match /notifications/{notificationId} {
        allow read, update: if isUserAuthenticated() && request.auth.uid == resource.data.recipientId;
    }

    // Coleção de Tokens para Push Notification
    match /userPushTokens/{userId} {
        allow read, write: if isUserAuthenticated() && isOwner(userId);
    }
    
    // Coleção de Conteúdo Compartilhável (Ponte da Esperança)
    match /sharedContent/{contentId} {
      allow get; // Permite leitura pública
      allow create: if isUserAuthenticated();
      allow update: if isUserAuthenticated() && request.auth.uid == resource.data.creatorId;
    }
  }
}
