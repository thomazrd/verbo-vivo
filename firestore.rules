
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isProfileOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isCongregationAdmin(congregationId) {
    	return get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true;
    }
    
    function isCongregationMember(congregationId) {
      return exists(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid));
    }

    // Users: Can read/write their own profile.
    // Can update their profile to request joining a congregation.
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isProfileOwner(userId);
      allow update: if isProfileOwner(userId) && (
          // Allow joining a congregation
          (request.resource.data.congregationStatus == 'PENDING' && request.resource.data.congregationId != null) ||
          // Allow leaving a congregation
          (request.resource.data.congregationStatus == 'NONE' && request.resource.data.congregationId == null) ||
          // Allow admins to change status (this will be handled by the admin-specific rules on the members collection)
          isCongregationAdmin(request.resource.data.congregationId) ||
          // Allow regular profile updates not related to congregation
          (request.resource.data.diff(resource.data).affectedKeys()
            .difference(['congregationId', 'congregationStatus', 'uid', 'email', 'createdAt']).size() > 0)
      );
    }
    
    // Congregations: Any authenticated user can create one.
    // Only admins can update details (like name, pastor).
    // Member count is updated server-side.
    match /congregations/{congregationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isCongregationAdmin(congregationId);
    }
    
    // Congregation Members: Admins can manage all members.
    // Users can create their own 'PENDING' request.
    match /congregations/{congregationId}/members/{memberId} {
      allow read: if isCongregationMember(congregationId);
      allow create: if isProfileOwner(memberId) && request.resource.data.status == 'PENDING';
      allow update, delete: if isCongregationAdmin(congregationId);
    }

    // Congregation Posts and subcollections
    match /congregations/{congregationId}/posts/{postId} {
      allow read: if isCongregationMember(congregationId);
      // Can create if they are a member. Can delete if they are the author or an admin.
      allow create: if isCongregationMember(congregationId) && request.resource.data.authorId == request.auth.uid;
      allow update: if isCongregationMember(congregationId) && resource.data.authorId == request.auth.uid;
      allow delete: if isCongregationMember(congregationId) && (resource.data.authorId == request.auth.uid || isCongregationAdmin(congregationId));
      
      // Comments
      match /comments/{commentId} {
        allow read: if isCongregationMember(congregationId);
        allow create: if isCongregationMember(congregationId) && request.resource.data.authorId == request.auth.uid;
        allow update, delete: if isCongregationMember(congregationId) && (resource.data.authorId == request.auth.uid || isCongregationAdmin(congregationId));
      }
    }

    // Journals: Only the user can access their own entries.
    match /journals/{entryId} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }

    // Messages: Only the user can access their own chat history.
    match /users/{userId}/messages/{messageId} {
      allow read, write: if isProfileOwner(userId);
    }

    // Plans: Only the user can access their own study plans.
    match /users/{userId}/plans/{planId} {
      allow read, write: if isProfileOwner(userId);
    }

    // Meditations: Only the user can access their own meditations.
    match /meditations/{meditationId} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Prayer Circles: Users can create them.
    // Members can read, and creator/admins can update/delete.
    match /prayerCircles/{circleId} {
       allow read: if isAuthenticated() && request.auth.uid in resource.data.members;
       allow create: if isAuthenticated() && request.auth.uid in request.resource.data.members;
       allow update: if isAuthenticated() && request.auth.uid in resource.data.members; // Simple rule for now
    }
    
    // Prayer Requests: Members of the circle can read/write.
    match /prayerRequests/{requestId} {
      allow read, create: if isAuthenticated() && exists(/databases/$(database)/documents/prayerCircles/$(request.resource.data.circleId)) && request.auth.uid in get(/databases/$(database)/documents/prayerCircles/$(request.resource.data.circleId)).data.members;
      allow update: if isAuthenticated() && exists(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)) && request.auth.uid in get(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)).data.members;
    }

    // Prayers from Sanctuary: Only user can access their own.
    match /prayers/{prayerId} {
      allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
    
    // Shared Content (Ponte da Esperan√ßa): Writable by authenticated users, readable by all.
    match /sharedContent/{contentId} {
      allow read;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.creatorId == request.auth.uid;
    }
  }
}
