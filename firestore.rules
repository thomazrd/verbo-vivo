
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Funções relacionadas à autenticação

function isSignedIn() {
  return request.auth != null;
}

// Verifica se o usuário autenticado é o dono do recurso
function isUser(userId) {
  return isSignedIn() && request.auth.uid == userId;
}

// Verifica se o usuário tem a claim de ADMIN em seu token
function isAdmin() {
  return isSignedIn() && request.auth.token.role == 'ADMIN';
}

// Verifica se o usuário é um membro ou admin da congregação
function isCongregationMember(congregationId) {
    return isSignedIn() && get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
}

// Verifica se o usuário é um admin da congregação
function isCongregationAdmin(congregationId) {
    return isSignedIn() && get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN';
}


function canReadStudy() {
  // Allow read if the study is published, or if the user is an admin reading any status.
  return resource.data.status == 'PUBLISHED' || (isSignedIn() && isRole('ADMIN'));
}

function canWriteStudy() {
  // Allow write only if the user is an admin.
  return isSignedIn() && isRole('ADMIN');
}

function canReadArticle() {
  return resource.data.status == 'published' || (isSignedIn() && isRole('ADMIN'));
}

function canWriteArticle() {
  return isSignedIn() && isRole('ADMIN');
}



match /articles/{articleId} {
  allow read: if canReadArticle();
  allow write: if canWriteArticle();
}



match /congregations/{congregationId} {
  allow read: if isCongregationMember(congregationId);
  allow write: if isCongregationAdmin(congregationId);

  match /members/{memberId} {
    allow read: if isCongregationMember(congregationId);
    allow write: if isCongregationAdmin(congregationId) || isUser(memberId);
  }

  match /posts/{postId} {
    allow read: if isCongregationMember(congregationId);
    allow create: if isCongregationMember(congregationId) && request.resource.data.authorId == request.auth.uid;
    allow update: if isCongregationMember(congregationId) && resource.data.authorId == request.auth.uid;
    allow delete: if isCongregationMember(congregationId) && (resource.data.authorId == request.auth.uid || isCongregationAdmin(congregationId));
    
    match /comments/{commentId} {
        allow read: if isCongregationMember(congregationId);
        allow create: if isCongregationMember(congregationId) && request.resource.data.authorId == request.auth.uid;
        allow update: if isCongregationMember(congregationId) && resource.data.authorId == request.auth.uid;
        allow delete: if isCongregationMember(congregationId) && (resource.data.authorId == request.auth.uid || isCongregationAdmin(congregationId));
    }

    match /likes/{userId} {
        allow read: if isCongregationMember(congregationId);
        allow create, delete: if isCongregationMember(congregationId) && request.auth.uid == userId;
    }
  }
}



match /sharedArmors/{armorId} {
  allow read: if true;
  allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
  allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
}



match /studies/{studyId} {
  allow read: if canReadStudy();
  allow write: if canWriteStudy();
}



match /users/{userId} {
  allow read: if isSignedIn();
  allow create: if isProfileOwner(userId);
  allow update: if isProfileOwner(userId);
  
  match /armors/{armorId} {
    allow read, write: if isProfileOwner(userId);
  }

  match /plans/{planId} {
    allow read, write: if isProfileOwner(userId);
  }

  match /messages/{messageId} {
    allow read, write: if isProfileOwner(userId);
  }
}

  }
}
