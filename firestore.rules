
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // -- Funções de Utilidade --
    
    // Verifica se o UID do usuário solicitante é um administrador da congregação especificada.
    function isAdminOf(congregationId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.congregationStatus == 'ADMIN' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.congregationId == congregationId;
    }
    
    // Verifica se o usuário é um membro aprovado da congregação.
    function isMemberOf(congregationId) {
      let userStatus = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.congregationStatus;
      let userCongregationId = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.congregationId;
      return request.auth != null &&
             userCongregationId == congregationId &&
             (userStatus == 'MEMBER' || userStatus == 'ADMIN' || userStatus == 'APPROVED');
    }
    
    // -- Regras por Coleção --

    match /users/{userId} {
      allow read: if request.auth != null;
      // Permite que o próprio usuário atualize seu perfil OU que um admin atualize o status de um membro de sua congregação.
      allow update: if request.auth.uid == userId || 
                     (isAdminOf(get(/databases/$(database)/documents/users/$(request.auth.uid)).data.congregationId) && 
                      request.resource.data.congregationId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.congregationId);
      allow create: if request.auth.uid == userId;
    }

    match /congregations/{congregationId} {
      allow read: if isMemberOf(congregationId);
      // Apenas administradores podem atualizar os detalhes da congregação.
      allow update: if isAdminOf(congregationId);
    }
    
    match /congregations/{congregationId}/members/{memberId} {
        allow read: if isMemberOf(congregationId);
        // Usuário só pode criar sua própria solicitação de entrada.
        allow create: if request.auth.uid == memberId;
        // Admins podem atualizar (aprovar/promover) ou deletar (rejeitar/remover) membros.
        allow update, delete: if isAdminOf(congregationId);
    }
    
    match /congregations/{congregationId}/posts/{postId} {
      allow read, create: if isMemberOf(congregationId);
      // O autor do post ou um admin pode atualizar ou deletar o post.
      allow update, delete: if request.auth.uid == resource.data.authorId || isAdminOf(congregationId);
    }

    match /congregations/{congregationId}/posts/{postId}/comments/{commentId} {
        allow read, create: if isMemberOf(congregationId);
    }
    
    match /prayerCircles/{circleId} {
        allow create: if request.auth != null;
        // Apenas membros podem ler ou atualizar (adicionar/remover membros) o círculo.
        allow read, update: if request.auth.uid in resource.data.members;
    }
    
    match /prayerRequests/{requestId} {
        // Apenas membros do círculo correspondente podem interagir com os pedidos.
        allow read, create: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/prayerCircles/$(request.resource.data.circleId)).data.members;
        allow update: if request.auth.uid in get(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)).data.members;
    }

    match /journals/{journalId} {
      // Usuário só pode ler, atualizar ou deletar seus próprios diários.
      allow read, update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
      // Usuário só pode criar diários para si mesmo.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    match /sharedContent/{contentId} {
      allow read;
      allow create: if request.auth != null;
    }

  }
}
