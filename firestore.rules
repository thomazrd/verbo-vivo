rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdminOf(congId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.congregationStatus == 'ADMIN' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.congregationId == congId;
    }

    function isMemberOf(congId) {
      let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userProfile.congregationId == congId &&
             (userProfile.congregationStatus == 'MEMBER' || userProfile.congregationStatus == 'ADMIN');
    }

    // --- Collection Rules ---

    // Users can read their own profile.
    // Admins can update a user's status within their congregation.
    // Users can update their own profile details.
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      
      // Rule for updating user's own profile info
      allow update: if isOwner(userId) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'onboardingCompleted', 'preferredLanguage']);
      
      // Rule for updating congregation status (by admin or user leaving)
      allow update: if (
                      // Admin of the target congregation can update status
                      isAdminOf(request.resource.data.congregationId) ||
                      // User can leave a congregation by setting status to NONE
                      (isOwner(userId) && request.resource.data.congregationId == null && request.resource.data.congregationStatus == 'NONE')
                    ) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['congregationId', 'congregationStatus']);

      allow create: if isOwner(userId);
    }
    
    // Plans are private to the user.
    match /users/{userId}/plans/{planId} {
      allow read, write: if isOwner(userId);
    }
    
    // Journal entries are private to the user
    match /journals/{entryId} {
      allow read, update, delete: if isOwner(resource.data.userId);
      allow create: if isOwner(request.resource.data.userId);
    }
    
    match /meditations/{meditationId} {
        allow create: if isOwner(request.resource.data.userId);
        allow read, write: if isOwner(resource.data.userId);
    }
    
    // All authenticated users can read congregation info.
    // Admins of the congregation can update it.
    match /congregations/{congId} {
        allow read: if isUserAuthenticated();
        allow create: if isUserAuthenticated(); // User creates a congregation and becomes admin
        allow update: if isAdminOf(congId) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberCount']);
    }
    
    // Rules for members subcollection within a congregation
    match /congregations/{congId}/members/{memberId} {
      allow read: if isMemberOf(congId);
      
      // A user can add themselves with a PENDING status
      allow create: if isOwner(memberId) && request.resource.data.status == 'PENDING';
      
      // An admin can update a member's status or a user can update their own doc for specific actions
      allow update: if isAdminOf(congId) &&
                       (
                         // Approving a member
                         (request.resource.data.status == 'APPROVED' && resource.data.status == 'PENDING') ||
                         // Promoting a member
                         (request.resource.data.status == 'ADMIN' && resource.data.status == 'APPROVED')
                       );
                       
      // An admin or the user themselves can remove the member document
      allow delete: if isAdminOf(congId) || isOwner(memberId);
    }
    
    // Members can read/create posts.
    match /congregations/{congId}/posts/{postId} {
        allow read, create: if isMemberOf(congId);
        allow update: if isMemberOf(congId) && 
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likeCount', 'likes', 'commentCount']);
    }
    
    // Members can read/create comments. Only author can edit/delete.
    match /congregations/{congId}/posts/{postId}/comments/{commentId} {
        allow read, create: if isMemberOf(congId);
        
        // Allow members to update a comment ONLY to increment replyCount
        allow update: if isMemberOf(congId) && 
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['replyCount']) &&
                        request.resource.data.replyCount == resource.data.replyCount + 1;

        // Allow comment author to update the text of their own comment
        allow update: if isOwner(resource.data.authorId) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['text']);

        allow delete: if isOwner(resource.data.authorId) || isAdminOf(congId);
    }
    
    // Rules for prayer circles and requests
    match /prayerCircles/{circleId} {
        allow read: if request.auth.uid in resource.data.members;
        allow create: if request.auth.uid in request.resource.data.members;
        allow update: if request.auth.uid in resource.data.members &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']);
    }

    match /prayerRequests/{requestId} {
        allow create: if get(/databases/$(database)/documents/prayerCircles/$(request.resource.data.circleId)).data.members.hasAny([request.auth.uid]);
        allow read: if get(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)).data.members.hasAny([request.auth.uid]);
        allow update: if get(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)).data.members.hasAny([request.auth.uid]) &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['prayingUsers']);
    }
    
    // Sharable content is public to read, but only creator can create
    match /sharedContent/{contentId} {
        allow read: if true;
        allow create: if isOwner(request.resource.data.creatorId);
        allow update: if true; // Allow viewCount increment for anyone
    }
  }
}
