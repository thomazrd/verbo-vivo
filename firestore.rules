
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if a user is a member of a congregation
    function isCongregationMember(congregationId) {
      return get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
    }

    match /users/{userId} {
      // Users can read and write to their own document
      allow read, update: if request.auth.uid == userId;
      // Allow authenticated users to read public profiles
      allow get: if request.auth != null;
    }
    
    match /congregations/{congregationId} {
      // Allow any authenticated user to read congregation details
      allow read: if request.auth != null;
      // Cloud Functions handle creation and updates that require admin logic
      allow write: if false;

      match /members/{memberId} {
        // Members can view other members.
        allow read: if isCongregationMember(congregationId);
        // Cloud Functions handle creation, updates, and deletion
        allow write: if false;
      }
      
      match /posts/{postId} {
        // Any member of the congregation can read posts
        allow read: if isCongregationMember(congregationId);
        // A member can create a post if their authorId matches their UID
        allow create: if isCongregationMember(congregationId) && request.resource.data.authorId == request.auth.uid;
        // The author of the post can update it
        allow update: if isCongregationMember(congregationId) && resource.data.authorId == request.auth.uid;
        // The author of the post or an admin can delete it
        allow delete: if isCongregationMember(congregationId) && (resource.data.authorId == request.auth.uid || get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN');
        
        match /comments/{commentId} {
          // Any member can read comments
          allow read: if isCongregationMember(congregationId);
          // Any member can create a comment if their authorId matches their UID
          allow create: if isCongregationMember(congregationId) && request.resource.data.authorId == request.auth.uid;
          // The author of the comment can update or delete it
          allow update, delete: if isCongregationMember(congregationId) && resource.data.authorId == request.auth.uid;
        }

        match /likes/{userId} {
           // Any member can read who liked a post
           allow read: if isCongregationMember(congregationId);
           // A member can like/unlike a post if the document ID is their UID
           allow write: if isCongregationMember(congregationId) && userId == request.auth.uid;
        }
      }
    }
    
    // Default deny all other collections for security
    match /{path=**}/documents {
      allow read, write: if false;
    }
  }
}
