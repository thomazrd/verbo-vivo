rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- User Profiles ---
    match /users/{userId} {
      // Allow users to read their own profile
      allow read: if request.auth.uid == userId;
      // Allow users to create their own profile on signup
      allow create: if request.auth.uid == userId;
      // Allow users to update their own profile (displayName, photoURL, preferences etc.)
      allow update: if request.auth.uid == userId;
    }

    // --- User Sub-collections ---
    match /users/{userId}/{collection}/{docId} {
        // Users can only access their own sub-collections (messages, plans, etc.)
        allow read, write: if request.auth.uid == userId;
    }
    
    // --- ARMORS (NEW) ---
    match /users/{userId}/armors/{armorId} {
        // A user can only read, create, update, and delete their own armors.
        allow read, write: if request.auth.uid == userId;
    }

    // --- Congregations ---
    match /congregations/{congregationId} {
      // Anyone authenticated can find/read a congregation's public info
      allow read: if request.auth != null;
      // Only authenticated users can create a congregation (handled by a function)
      allow create: if request.auth != null;
      // Updates are restricted (e.g., only by admins, handled by functions)
      allow update: if resource.data.admins[request.auth.uid] == true;
      allow delete: if resource.data.admins[request.auth.uid] == true;
    }
    
    match /congregations/{congregationId}/members/{memberId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null; // Creation and updates handled by Cloud Functions
    }

    // --- Posts, Comments, Likes ---
    function isCongregationMember(congregationId) {
      return get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
    }

    match /congregations/{congregationId}/posts/{postId} {
      // Members of the congregation can read and create posts
      allow read, create: if isCongregationMember(congregationId);
      // Only the author of the post or an admin can update/delete it
      allow update, delete: if isCongregationMember(congregationId) && (resource.data.authorId == request.auth.uid || get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true);
    }
    
    match /congregations/{congregationId}/posts/{postId}/comments/{commentId} {
        // Any member of the congregation can create comments
        allow create: if isCongregationMember(congregationId);
        // Any member of the congregation can read comments
        allow read: if isCongregationMember(congregationId);
        // Only the author of the comment can update or delete it
        allow update, delete: if isCongregationMember(congregationId) && resource.data.authorId == request.auth.uid;
    }
    
    match /congregations/{congregationId}/posts/{postId}/likes/{userId} {
        // A member can like a post (create their own like document)
        allow create: if isCongregationMember(congregationId) && request.auth.uid == userId;
        // A member can read likes
        allow read: if isCongregationMember(congregationId);
        // A member can only delete their own like
        allow delete: if isCongregationMember(congregationId) && request.auth.uid == userId;
    }

    // --- Articles (Blog) ---
    match /articles/{articleId} {
        // Anyone can read published articles
        allow read: if resource.data.status == 'published';
        // Only authenticated users (future: admins) can create/update/delete
        allow write: if request.auth != null;
    }

    // --- Publicly Shared Content (Ponte da Esperan√ßa) ---
    match /sharedContent/{contentId} {
        // Anyone can read the shared content
        allow read: if true;
        // Only the creator can update it (e.g., view count - handled by server)
        // or an authenticated user can create new content.
        allow write: if request.auth != null;
    }

    // Default deny all other access
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
