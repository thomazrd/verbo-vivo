rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isCongregationMember(congregationId) {
      return exists(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid));
    }
    
    // User profiles: Users can read their own profile and update it.
    match /users/{userId} {
      allow read, update: if isOwner(userId);
    }

    // Congregations: Allow authenticated users to search/list.
    // Allow members to read details.
    match /congregations/{congregationId} {
      allow list: if isUserAuthenticated();
      allow get: if isCongregationMember(congregationId);

      // Members can read/write posts and comments.
      match /posts/{postId} {
        allow read, write: if isCongregationMember(congregationId);
        
        match /comments/{commentId} {
          allow read, write: if isCongregationMember(congregationId);
        }
      }
      
      // Allow users to request joining.
      // Allow members/admins to read member list.
      match /members/{memberId} {
        allow read: if isCongregationMember(congregationId);
        allow create: if isOwner(memberId);
        // Admins can update/delete members (handled by Cloud Functions).
      }
    }
    
    // Journal, Plans, Meditations, Prayers: Only accessible by the owner.
    match /{collection}/{docId} {
      allow read, write, delete: if collection in ['journals', 'plans', 'meditations', 'prayers'] &&
                                     request.auth.uid == resource.data.userId;
    }
    
    // Shared Content (Ponte da Esperan√ßa): Anyone can read. Only creator can create.
    match /sharedContent/{contentId} {
      allow get;
      allow create: if isUserAuthenticated() && request.resource.data.creatorId == request.auth.uid;
      allow update: if request.resource.data.creatorId == request.auth.uid;
    }

    // Notifications and push tokens are handled by backend Cloud Functions
    match /notifications/{notificationId} {
        allow read, write: if false; // Managed by Cloud Functions
    }

    match /userPushTokens/{tokenId} {
        allow read, write: if false; // Managed by Cloud Functions
    }
  }
}
