rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions from base.rules are automatically included here.
    // Modular rules for collections will be injected below.
    
        // === REGRAS PARA ARTIGOS (BLOG) ===
    match /articles/{articleId} {
      // Leitura: Qualquer pessoa pode ler artigos publicados.
      allow read: if resource.data.status == 'published';
      
      // Escrita: Apenas administradores podem criar, editar e apagar.
      allow write: if userData(request.auth.uid).role == 'ADMIN';
    }


    // === FUNÇÕES GLOBAIS ===
    
    // Retorna os dados de um perfil de usuário.
    function userData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // Verifica se o usuário autenticado é o dono do recurso.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }


    // === REGRAS PARA CHAT ===
    match /users/{userId}/messages/{messageId} {
      // Apenas o próprio usuário pode ler e escrever suas mensagens.
      allow read, write: if request.auth.uid == userId;
    }


    // === REGRAS PARA COMUNIDADE (CONGREGAÇÕES) ===
    match /congregations/{congregationId} {
      // Leitura: Membros da congregação podem ler os dados da congregação.
      allow read: if userData(request.auth.uid).congregationId == congregationId;
      
      // Atualização: Apenas administradores da congregação podem editar os dados.
      allow update: if userData(request.auth.uid).congregationStatus == 'ADMIN';
      
      // Criação: Regra gerenciada pela Cloud Function `createCongregation`.
      allow create: if request.auth != null;
      
      // --- SUBCOLEÇÕES ---
      
      // Membros
      match /members/{memberId} {
        // Leitura: Outros membros podem ver a lista de membros.
        allow read: if userData(request.auth.uid).congregationId == congregationId;
        
        // Escrita: Administradores podem adicionar/remover/atualizar membros. O próprio usuário pode sair.
        allow write: if userData(request.auth.uid).congregationStatus == 'ADMIN' || isOwner(memberId);
      }
      
      // Posts
      match /posts/{postId} {
        // Leitura: Membros podem ler todos os posts.
        allow read: if userData(request.auth.uid).congregationId == congregationId;
        
        // Criação: Membros podem criar posts.
        allow create: if isOwner(request.resource.data.authorId) && userData(request.auth.uid).congregationId == congregationId;
        
        // Atualização/Exclusão: Apenas o autor do post pode editar/excluir.
        allow update, delete: if isOwner(resource.data.authorId);
        
        // Likes e Comentários
        match /{subcollection}/{docId} {
           // Leitura: Membros podem ler likes e comentários.
           allow read: if userData(request.auth.uid).congregationId == congregationId;
           // Escrita: Membros podem dar like e comentar.
           allow write: if userData(request.auth.uid).congregationId == congregationId;
        }
      }
    }


    // === REGRAS GERAIS ===

    // Diário Pessoal
    match /journals/{journalId} {
      allow read, write, delete: if isOwner(request.resource.data.userId);
    }

    // Planos de Estudo Pessoais
    match /plans/{planId} {
        allow read, write, delete: if isOwner(request.resource.data.userId);
    }

    // Orações Pessoais
    match /prayers/{prayerId} {
       allow read, write, delete: if isOwner(request.resource.data.userId);
    }

    // Meditações Pessoais
    match /meditations/{meditationId} {
       allow read, write, delete: if isOwner(request.resource.data.userId);
    }

    // Jornadas de Sentimento
    match /feelingJourneys/{journeyId} {
       allow read, write, delete: if isOwner(request.resource.data.userId);
    }

    // Ponte da Esperança (Conteúdo Compartilhado)
    match /sharedContent/{contentId} {
      allow read: if resource.data.status == 'ACTIVE';
      allow create: if isUserAuthenticated() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isOwner(resource.data.creatorId); // Para marcar como deletado
    }

    // Tokens para Notificações Push
    match /userPushTokens/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // Notificações do Usuário
    match /notifications/{notificationId} {
      allow read, update: if isOwner(resource.data.recipientId);
    }



rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /sharedContent/{contentId} {
      // Qualquer pessoa pode ler um conteúdo compartilhado que está ativo
      allow read: if resource.data.status == 'ACTIVE';

      // O criador pode atualizar (ex: para deletar logicamente)
      allow update: if request.auth != null && request.auth.uid == resource.data.creatorId;

      // Qualquer usuário autenticado pode criar
      allow create: if request.auth != null;
      
      // Ninguém pode deletar diretamente
      allow delete: if false;
    }
  }
}


    // === REGRAS PARA ESTUDOS (PÍLULAS DE SABEDORIA) ===
    match /studies/{studyId} {
        // Leitura: Qualquer um pode ler se estiver publicado. Rascunhos só para admins.
        allow read: if resource.data.status == 'PUBLISHED' || (request.auth != null && userData(request.auth.uid).role == 'ADMIN');
        
        // Escrita: Apenas admins.
        allow write: if request.auth != null && userData(request.auth.uid).role == 'ADMIN';
    }


    // === REGRAS PARA USUÁRIOS ===
    match /users/{userId} {
      // Leitura: Qualquer usuário autenticado pode ler perfis de outros para funcionalidades da comunidade.
      allow read: if request.auth != null;
      
      // Escrita: Apenas o próprio usuário pode atualizar seu perfil.
      allow write: if isOwner(userId);
    }



  }
}

  
  }
}
