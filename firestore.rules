rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================
    // Helper Functions
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Checks if the user making the request is an admin of a specific congregation
    function isAdminOf(congregationId) {
      // Use exists() which is more efficient for checking document presence
      return exists(/databases/$(database)/documents/congregations/$(congregationId)) &&
             get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true;
    }
    
    // Checks if a user is a member of a congregation (for reading posts)
    function isMemberOf(congregationId) {
    	return isSignedIn() && exists(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid));
    }
    
    // Checks if the user is updating only their displayName and/or photoURL
    function isUpdatingProfile(req) {
       let allowedFields = ['displayName', 'photoURL'];
       return req.resource.data.keys().hasAll(allowedFields) && req.resource.data.keys().hasOnly(allowedFields);
    }
    
    // Allow an admin to update a user's congregation status
    function allowUserStatusUpdate(req, userId) {
      let congregationId = req.resource.data.congregationId;
      return isAdminOf(congregationId) &&
             req.resource.data.keys().hasAll(['congregationId', 'congregationStatus']) &&
             (req.resource.data.congregationStatus == 'MEMBER' || req.resource.data.congregationStatus == 'NONE');
    }

    // =================================
    // Collection Rules
    // =================================
    match /users/{userId} {
      allow read: if isSignedIn();
      // Users can only create their own user document
      allow create: if isOwner(userId);
      // Users can update their own doc for profile changes or if an admin is changing their status
      allow update: if isOwner(userId) && (isUpdatingProfile(request) || request.resource.data.keys().hasAll(['preferredLanguage'])) ||
                       (isSignedIn() && allowUserStatusUpdate(request, userId));
    }
    
    match /journals/{entryId} {
        allow read, update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    match /plans/{planId} {
      // Allow all actions if the user is the owner of the plan.
      // Plans are stored in a subcollection under the user.
      allow read, write, delete: if isSignedIn();
    }
    
     match /meditations/{meditationId} {
        allow read, write, delete: if isSignedIn() && request.resource.data.userId == request.auth.uid;
    }

    match /prayerCircles/{circleId} {
      allow read, update: if isSignedIn() && request.auth.uid in resource.data.members;
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.members;
    }

    match /prayerRequests/{requestId} {
      allow read: if isSignedIn(); // Further checks might be needed if circles are sensitive
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn(); // Allow updates for users to add their name to 'prayingUsers'
    }
    
    match /sharedContent/{contentId} {
      allow read: if true; // Anyone with the link can read
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      allow update: if request.resource.data.viewCount == resource.data.viewCount + 1; // Only allow view count increments
    }

    // --- Community / Congregation Rules ---
    
    match /congregations/{congregationId} {
      allow read: if isMemberOf(congregationId);
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isAdminOf(congregationId); // Only admins can update congregation details

      // --- Subcollections ---
      
      match /members/{memberId} {
        allow read: if isMemberOf(congregationId);
        allow create: if isSignedIn() && request.auth.uid == memberId; // Users can request to join
        
        // Admins can approve (update status to APPROVED), remove (delete), or promote (update status to ADMIN)
        allow update, delete: if isAdminOf(congregationId);
      }
      
      match /posts/{postId} {
        allow read: if isMemberOf(congregationId);
        allow create: if isMemberOf(congregationId) && request.resource.data.authorId == request.auth.uid;
        // Allow updates only for likes/comments counts, or by the post author for their own content
        allow update: if isMemberOf(congregationId); // Simplified for likes/comments
        allow delete: if isMemberOf(congregationId) && (request.auth.uid == resource.data.authorId || isAdminOf(congregationId));

        match /comments/{commentId} {
          allow read: if isMemberOf(congregationId);
          allow create: if isMemberOf(congregationId) && request.resource.data.authorId == request.auth.uid;
          allow delete: if isMemberOf(congregationId) && (request.auth.uid == resource.data.authorId || isAdminOf(congregationId));
        }
      }
    }
  }
}
