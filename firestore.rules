
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Usuários: podem ler seus próprios perfis, qualquer um pode criar
    match /users/{userId} {
      allow read, update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }
    
    // Armaduras: só o dono pode ler e escrever, a menos que seja compartilhada (isShared)
    match /users/{userId}/armors/{armorId} {
      function isOwner() {
        return request.auth.uid == userId;
      }
      function isShared() {
        return resource.data.isShared == true;
      }
      
      // Dono tem acesso total. Outros usuários podem ler se for compartilhada.
      allow read: if isOwner() || isShared();
      
      // Apenas o dono pode criar, atualizar e deletar.
      // Ao criar, o userId do documento deve ser o mesmo do usuário logado.
      allow write: if isOwner() && request.resource.data.userId == request.auth.uid;
    }

    // Regras para as outras coleções...
    match /journals/{journalId} {
      allow read, write: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    match /meditations/{meditationId} {
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    match /plans/{planId} {
        allow read, write: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    match /messages/{messageId} {
        allow read, write: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    match /users/{userId}/messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        allow create: if request.auth != null && request.auth.uid == userId;
    }

    match /feelingJourneys/{journeyId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    match /prayers/{prayerId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    match /sharedContent/{contentId} {
      allow read;
      allow create: if request.auth != null && request.resource.data.creatorId == request.auth.uid;
      allow update: if resource.data.creatorId == request.auth.uid;
    }
    
    match /prayerCircles/{circleId} {
        allow read, write: if request.auth != null && request.auth.uid in resource.data.members;
        allow create: if request.auth != null;
    }
    
    match /prayerRequests/{requestId} {
        // Allow read if user is member of the circle this request belongs to
        allow read, write: if request.auth != null && exists(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)) && request.auth.uid in get(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)).data.members;
        allow create: if request.auth != null && exists(/databases/$(database)/documents/prayerCircles/$(request.resource.data.circleId)) && request.auth.uid in get(/databases/$(database)/documents/prayerCircles/$(request.resource.data.circleId)).data.members;
    }

    match /congregations/{congregationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && (request.auth.uid in resource.data.admins || request.auth.uid == resource.data.createdBy);
    }
    
    match /congregations/{congregationId}/members/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (request.auth.uid in get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins || request.auth.uid == userId);
    }
    
    match /congregations/{congregationId}/posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      allow update: if request.auth != null && (resource.data.authorId == request.auth.uid || request.auth.uid in get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins);
      allow delete: if request.auth != null && (resource.data.authorId == request.auth.uid || request.auth.uid in get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins);
    }

     match /congregations/{congregationId}/posts/{postId}/{subcollection}/{docId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null;
    }
    
     match /notifications/{notificationId} {
        allow read, write: if request.auth != null && resource.data.recipientId == request.auth.uid;
    }

    match /userPushTokens/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /articles/{articleId} {
      allow read: if resource.data.status == 'published';
      allow write: if request.auth != null; // Simplificado para admin, a lógica está na cloud function
    }

    match /wisdomPearls/{pearlId} {
        allow read; // Permite leitura pública
    }

  }
}
