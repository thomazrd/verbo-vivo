
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read/write their own profile
    match /users/{userId} {
      // Allow read, create, delete if user is authenticated and is the owner
      allow read, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;

      // Allow updates if user is the owner.
      // Additionally, allow updating congregation status to PENDING when joining a new one.
      allow update: if request.auth != null && request.auth.uid == userId &&
                    (
                      // Standard update by owner
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'onboardingCompleted', 'preferredLanguage'])) ||
                      // Joining a congregation
                      (
                        request.resource.data.congregationId != resource.data.congregationId &&
                        request.resource.data.congregationStatus == 'PENDING'
                      )
                    );
    }
    
    // Prayer sanctuary
    match /prayers/{prayerId} {
      allow read, create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Meditations
    match /meditations/{meditationId} {
      allow read, create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // User-specific study plans
    match /users/{userId}/plans/{planId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // User-specific chat messages
    match /users/{userId}/messages/{messageId} {
      allow read, create, update, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Prayer circles
    match /prayerCircles/{circleId} {
        allow read, update, create: if request.auth != null && request.auth.uid in resource.data.members;
    }

    match /prayerRequests/{requestId} {
        allow read, update, create: if request.auth != null;
    }

    // Journals
    match /journals/{journalId} {
        allow read, create, update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Shared content (Ponte da Esperan√ßa)
    match /sharedContent/{contentId} {
        allow read: if true;
        allow create: if request.auth != null;
        allow update: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }

    // Congregations
    match /congregations/{congregationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid in resource.data.admins;
      
      // Members subcollection
      match /members/{userId} {
        allow read: if request.auth != null;
        // Allow user to create their own PENDING request
        allow create: if request.auth != null && request.auth.uid == userId;
        // Allow admins to update status
        allow update: if request.auth != null && exists(/databases/$(database)/documents/congregations/$(congregationId)) && request.auth.uid in get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins;
      }
      
      // Posts subcollection
      match /posts/{postId} {
        allow read, create: if request.auth != null && exists(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid));
        allow update: if request.auth != null && request.auth.uid == resource.data.authorId;
        allow delete: if request.auth != null && (request.auth.uid == resource.data.authorId || request.auth.uid in get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins);
        
        // Comments sub-subcollection
        match /comments/{commentId} {
           allow read, create: if request.auth != null && exists(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid));
           allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
        }
      }
    }

  }
}
