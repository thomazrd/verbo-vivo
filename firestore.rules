
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAuth() {
      return request.auth != null;
    }

    function isAdminOf(congregationId) {
      return get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true;
    }

    function isMemberOf(congregationId) {
      let memberStatus = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.congregationStatus;
      let memberCongId = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.congregationId;
      return memberStatus == 'MEMBER' && memberCongId == congregationId;
    }

    // Collection: users
    match /users/{userId} {
      // Um usuário pode criar seu próprio perfil e ler qualquer outro perfil.
      allow read: if isAuth();
      allow create: if isAuthOwner(userId);

      // Um usuário pode atualizar seu próprio perfil, ou um administrador pode atualizar o status de congregação.
      allow update: if isAuthOwner(userId)
                    || (isAdminOf(request.resource.data.congregationId) && 
                        request.resource.data.keys().hasOnly(['congregationId', 'congregationStatus', 'uid', 'email', 'displayName', 'photoURL', 'createdAt', 'onboardingCompleted', 'preferredLanguage']));
    }

    // Collection: journals, plans, etc (User-specific data)
    match /journals/{docId} {
      allow read, write, delete: if isAuth() && request.resource.data.userId == request.auth.uid;
      allow create: if isAuth() && request.data.userId == request.auth.uid;
    }
    
    match /users/{userId}/plans/{planId} {
      allow read, write, delete, create: if isAuthOwner(userId);
    }
    
    match /users/{userId}/messages/{messageId} {
        allow read, write, delete, create: if isAuthOwner(userId);
    }

    // Collection: prayerCircles & prayerRequests
    match /prayerCircles/{circleId} {
      allow read: if isAuth() && resource.data.members.hasAny([request.auth.uid]);
      allow create: if isAuth() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isAuth() && resource.data.members.hasAny([request.auth.uid]);
    }

    match /prayerRequests/{requestId} {
      allow read, create, update: if isAuth() && get(/databases/$(database)/documents/prayerCircles/$(request.resource.data.circleId)).data.members.hasAny([request.auth.uid]);
    }
    
    // Collection: prayers (Prayer Sanctuary)
    match /prayers/{prayerId} {
      allow read, write: if isAuth() && resource.data.userId == request.auth.uid;
      allow create: if isAuth() && request.data.userId == request.auth.uid;
    }
    
    // Collection: sharedContent (Ponte da Esperança)
    match /sharedContent/{contentId} {
        allow read: if true;
        allow create: if isAuth() && request.resource.data.creatorId == request.auth.uid;
        allow update: if isAuth() && resource.data.creatorId == request.auth.uid;
    }

    // --- Community Collections ---
    match /congregations/{congregationId} {
        allow read: if isAuth();
        allow create: if isAuth(); // User must be admin, checked in logic
        
        // Admins can update congregation details (e.g. memberCount)
        allow update: if isAdminOf(congregationId);
    }
    
    match /congregations/{congregationId}/members/{userId} {
        // Anyone authenticated can request to join.
        allow create: if isAuth() && request.auth.uid == userId;
        
        // Members can read the member list. Admins can read everything.
        allow read: if isMemberOf(congregationId) || isAdminOf(congregationId);
        
        // Admins can approve (update status) or remove (delete) members.
        allow update, delete: if isAdminOf(congregationId);
    }

    match /congregations/{congregationId}/posts/{postId} {
        // Members and admins can read, create, and like/comment on posts.
        allow read, create, update: if isMemberOf(congregationId) || isAdminOf(congregationId);
        // Only admins or the post author can delete posts.
        allow delete: if isAdminOf(congregationId) || resource.data.authorId == request.auth.uid;

        match /comments/{commentId} {
            // Members and admins can read and create comments.
            allow read, create: if isMemberOf(congregationId) || isAdminOf(congregationId);
            // Only admins or the comment author can delete/update comments.
            allow update, delete: if isAdminOf(congregationId) || resource.data.authorId == request.auth.uid;
        }
    }
  }
}
