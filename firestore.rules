rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'ADMIN';
    }

    match /users/{userId} {
      allow read, update: if isOwner(userId);
      allow create: if isSignedIn();
    }
    
    match /userPushTokens/{userId} {
        allow read, write: if isOwner(userId);
    }

    match /sharedContent/{contentId} {
        allow read: if true;
        allow create, update: if isSignedIn();
    }

    match /meditations/{meditationId} {
      allow read, write: if isSignedIn() && isOwner(request.resource.data.userId);
    }
    
    match /feelingJourneys/{journeyId} {
        allow read, write: if isSignedIn() && isOwner(request.resource.data.userId);
    }

    match /journals/{entryId} {
      allow read, write: if isSignedIn() && isOwner(request.resource.data.userId);
    }
    
    match /plans/{planId} {
      allow read, write: if isOwner(request.resource.data.userId);
    }
    
    match /messages/{messageId} {
        allow read, write: if isOwner(request.resource.data.userId);
    }
    
    match /armors/{armorId} {
      allow read, write: if isSignedIn() && isOwner(request.resource.data.userId);
    }
    
    match /sharedArmors/{armorId} {
      allow read: if isSignedIn();
      // Only the original author can update/delete the shared copy
      allow write: if isSignedIn() && isOwner(request.resource.data.userId);
    }

    match /congregations/{congregationId} {
        // Members can read congregation details
        allow read: if isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.congregationId == congregationId;
        // Only admins can update congregation details
        allow update: if isAdmin();
        // Creation is handled by a Cloud Function
        allow create: if isSignedIn();
        allow delete: if false; // Deletion should be handled by a Cloud Function
    }
    
    match /congregations/{congregationId}/members/{userId} {
        // A user can read their own member document, or an admin can read any.
        allow read: if isSignedIn() && (isOwner(userId) || isAdmin());
        // Requests to join are handled by Cloud Function
        allow create: if isSignedIn() && isOwner(userId);
        // Only admins can update status
        allow update: if isAdmin();
        allow delete: if isAdmin() || isOwner(userId); // Admins can remove, users can leave
    }
    
    match /congregations/{congregationId}/posts/{postId} {
        allow read, write: if isSignedIn();
    }
    
    match /congregations/{congregationId}/posts/{postId}/comments/{commentId} {
        allow read, write: if isSignedIn();
    }
    
     match /congregations/{congregationId}/posts/{postId}/likes/{userId} {
        allow read: if isSignedIn();
        allow write: if isSignedIn() && isOwner(userId);
    }
    
    match /notifications/{notificationId} {
        allow read, update: if isSignedIn() && isOwner(resource.data.recipientId);
        allow create: if false; // Only functions can create
    }
    
    match /articles/{articleId} {
        allow read: if resource.data.status == 'published';
        allow write: if isAdmin();
    }
    
    match /podcasts/{podcastId} {
      allow read: if isSignedIn();
      // Temporarily allow any logged in user to create for testing
      allow write: if isSignedIn();
    }
    
    match /prayerCircles/{circleId} {
      allow read: if resource.data.isPublic == true || request.auth.uid in resource.data.members;
      allow create: if isSignedIn();
      allow update: if request.auth.uid == resource.data.createdBy; // Only creator can update
    }

    match /victories/{victoryId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn(); // Allow liking
    }

    match /studies/{studyId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();
    }

  }
}
