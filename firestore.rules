rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdminOf(congregationId) {
        let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userProfile.congregationId == congregationId && userProfile.congregationStatus == 'ADMIN';
    }
    
    function isMemberOf(congregationId) {
        let userProfile = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return userProfile.congregationId == congregationId && (userProfile.congregationStatus == 'MEMBER' || userProfile.congregationStatus == 'ADMIN');
    }
    
    // --- Collection Rules ---

    // Users
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isOwner(userId);

      // Allow a user to update their own profile fields
      allow update: if isOwner(userId) && request.resource.data.keys().hasOnly(['displayName', 'photoURL', 'preferredLanguage', 'onboardingCompleted']);
      
      // Allow an admin to update a user's congregation status
      allow update: if isAdminOf(request.resource.data.congregationId) && request.resource.data.keys().hasOnly(['congregationId', 'congregationStatus']);
    }

    // Journals
    match /journals/{journalId} {
        allow read, update, delete: if isAuth() && resource.data.userId == request.auth.uid;
        allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
    }

    // Shared Content
    match /sharedContent/{contentId} {
      allow read: if true;
      allow create: if isAuth() && request.resource.data.creatorId == request.auth.uid;
      allow update: if resource.data.creatorId == request.auth.uid || isAuth(); // Allow owner or any auth user to increment viewCount
    }

    // Congregations
    match /congregations/{congregationId} {
      allow read: if isAuth() && isMemberOf(congregationId);
      allow create: if isAuth();
      
      // Member Management Subcollection
      match /members/{memberId} {
        allow read: if isMemberOf(congregationId);
        allow create: if isAuth(); // Anyone auth'd can request to join
        
        // Admins can update a member's status (approve/promote)
        allow update: if isAdminOf(congregationId) && request.resource.data.keys().hasOnly(['status', 'joinedAt']);
        
        // Admins can remove members
        allow delete: if isAdminOf(congregationId);
      }
      
      // Posts Subcollection
      match /posts/{postId} {
        allow read: if isMemberOf(congregationId);
        allow create: if isMemberOf(congregationId) && request.resource.data.authorId == request.auth.uid;
        allow update: if isMemberOf(congregationId); // For likes/comments count
        allow delete: if isOwner(resource.data.authorId) || isAdminOf(congregationId);
        
        // Comments Sub-Subcollection
        match /comments/{commentId} {
          allow read: if isMemberOf(congregationId);
          allow create: if isMemberOf(congregationId);
          
          // Allow author to edit their own comment text
          allow update: if isOwner(resource.data.authorId) && request.resource.data.keys().hasOnly(['text']);
          // Allow any member to update replyCount
          allow update: if isMemberOf(congregationId) && request.resource.data.keys().hasOnly(['replyCount']);

          // Allow author or admin to delete
          allow delete: if isOwner(resource.data.authorId) || isAdminOf(congregationId);
        }
      }
    }
  }
}
