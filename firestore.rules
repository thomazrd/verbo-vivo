rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isSameUser(userId) {
      return request.auth.uid == userId;
    }
    
    function isMemberOf(congregationId) {
        let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
        return userDoc.data.congregationId == congregationId && (userDoc.data.congregationStatus == 'MEMBER' || userDoc.data.congregationStatus == 'ADMIN');
    }
    
    function isAdminOf(congregationId) {
        let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
        return userDoc.data.congregationId == congregationId && userDoc.data.congregationStatus == 'ADMIN';
    }

    // Collection Rules
    
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if isSameUser(userId);
      allow update: if isSameUser(userId) && request.resource.data.keys().hasOnly(['displayName', 'photoURL', 'onboardingCompleted', 'preferredLanguage']);

      function allowUserStatusUpdate(congregationId) {
        let isAdmin = isAdminOf(congregationId);
        let isLeaving = request.resource.data.congregationStatus == 'NONE' && request.resource.data.congregationId == null;
        let isJoining = request.resource.data.congregationStatus == 'PENDING';
        
        return (isSameUser(userId) && (isLeaving || isJoining)) || (isAdmin);
      }
      
      allow update: if allowUserStatusUpdate(request.resource.data.congregationId);
      
      match /plans/{planId} {
        allow read, write: if isSameUser(userId);
      }
      
      match /messages/{messageId} {
        allow read, write: if isSameUser(userId);
      }
    }
    
    match /journals/{journalId} {
        allow create: if isSameUser(request.resource.data.userId);
        allow read, update, delete: if isSameUser(resource.data.userId);
    }
    
    match /prayers/{prayerId} {
      allow read, write: if isSameUser(request.auth.uid);
    }
    
    match /prayerCircles/{circleId} {
      allow read, update: if request.auth.uid in resource.data.members;
      allow create: if request.auth.uid == request.resource.data.createdBy;
    }
    
    match /prayerRequests/{requestId} {
      allow read, create: if get(/databases/$(database)/documents/prayerCircles/$(request.resource.data.circleId)).data.members.hasAny([request.auth.uid]);
      allow update: if get(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)).data.members.hasAny([request.auth.uid]);
    }

    match /meditations/{meditationId} {
      allow read, write: if isSameUser(request.auth.uid);
    }
    
    match /sharedContent/{contentId} {
        allow read: if true;
        allow create: if request.auth.uid == request.resource.data.creatorId;
        allow update: if request.resource.data.keys().hasOnly(['viewCount']);
    }
    
    match /congregations/{congregationId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.createdBy;
      allow update: if isAdminOf(congregationId); // Admins can update congregation details
      
      // Members of a congregation
      match /members/{memberId} {
        allow read: if isMemberOf(congregationId);
        allow create, delete: if isAdminOf(congregationId) || isSameUser(memberId);
        allow update: if isAdminOf(congregationId) && (
            (request.resource.data.status == 'APPROVED' && resource.data.status == 'PENDING') ||
            (request.resource.data.status == 'ADMIN' && resource.data.status == 'MEMBER')
        );
      }
      
      // Posts and related data
      match /posts/{postId} {
        allow read: if isMemberOf(congregationId);
        allow create: if isMemberOf(congregationId) && request.auth.uid == request.resource.data.authorId;
        allow update: if isMemberOf(congregationId) && (
          (request.auth.uid == resource.data.authorId) || 
          (request.resource.data.keys().hasOnly(['likeCount', 'likes', 'commentCount'])) // Any member can update likes/comments
        );

        // Comments on a post
        match /comments/{commentId} {
            allow read: if isMemberOf(congregationId);
            allow create: if isMemberOf(congregationId);
            allow update: if isMemberOf(congregationId) && (
                (request.auth.uid == resource.data.authorId) || // Author can edit their own comment
                (request.resource.data.keys().hasOnly(['replyCount']) && request.resource.data.replyCount == resource.data.replyCount + 1) // Any member can increment reply count
            );
        }
      }
    }
  }
}