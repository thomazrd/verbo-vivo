rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users Collection: Users can manage their own profile. Admins can update a member's status.
    match /users/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      
      // Allow user to update their own profile, but not to maliciously set pending status for a different congregation
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow user to update their own profile.
      // Also, allow a congregation admin to update a user's congregation status.
      allow update: if request.auth != null && (
        (request.auth.uid == userId && !(request.resource.data.congregationStatus == 'PENDING' && request.resource.data.congregationId != resource.data.congregationId)) ||
        (
            exists(/databases/$(database)/documents/congregations/$(request.resource.data.congregationId)) &&
            get(/databases/$(database)/documents/congregations/$(request.resource.data.congregationId)).data.admins[request.auth.uid] == true &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['congregationStatus', 'congregationId'])
        )
      );
    }
    
    // Congregations: Logged-in users can view congregations to join them.
    match /congregations/{congregationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      // Only admins can update the congregation details or member count.
      allow update: if request.auth != null && resource.data.admins[request.auth.uid] == true;

      // Members Subcollection
      match /members/{userId} {
        // Any authenticated user can request to join (create a PENDING document).
        // Admins can write to any member document (to approve, promote, etc.).
        allow write: if request.auth != null && (
            (request.method == 'create' && request.auth.uid == userId) ||
            (get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true)
        );
        // Only members of the congregation can read the members list.
        allow read: if request.auth != null && exists(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid));
        // Admins can delete member documents (remove/reject).
        allow delete: if request.auth != null && get(/databases/$(database)/documents/congregations/$(congregationId)).data.admins[request.auth.uid] == true;
      }
      
      // Posts Subcollection
      match /posts/{postId} {
        // Members of the congregation can read all posts.
        allow read: if request.auth != null && exists(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid));
        // Members can create posts and update/delete their own posts.
        allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
        allow update: if request.auth != null && request.auth.uid == resource.data.authorId;
        allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
        
        // Comments Sub-Subcollection
        match /comments/{commentId} {
            // Any member of the congregation can read comments.
            allow read: if request.auth != null && exists(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid));
            // Members can create comments and manage their own.
            allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
            allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
        }
      }
    }

    // Journals: Users can manage their own journal entries
    match /journals/{entryId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }
    
    // Messages: Users can manage their own chat messages
    match /users/{userId}/messages/{messageId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Plans: Users can manage their own study plans
    match /users/{userId}/plans/{planId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Prayers: Users can manage their own prayer entries
    match /prayers/{prayerId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Meditations: Users can manage their own meditation entries
    match /meditations/{meditationId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Prayer Circles: Users can manage circles they are members of
    match /prayerCircles/{circleId} {
        allow read, update: if request.auth != null && request.auth.uid in resource.data.members;
        allow create: if request.auth != null && request.auth.uid in request.resource.data.members;
    }

    // Prayer Requests: Users can add requests to circles they are in
    match /prayerRequests/{requestId} {
        allow read: if request.auth != null && get(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)).data.members.hasAny([request.auth.uid]);
        allow create: if request.auth != null && get(/databases/$(database)/documents/prayerCircles/$(request.resource.data.circleId)).data.members.hasAny([request.auth.uid]);
        allow update: if request.auth != null && get(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)).data.members.hasAny([request.auth.uid]);
    }
    
    // Shared Content for Ponte da Esperan√ßa:
    match /sharedContent/{contentId} {
        allow read: if true; // Publicly readable
        allow create: if request.auth != null; // Any authenticated user can create
        allow update: if request.auth != null && request.auth.uid == resource.data.creatorId; // Only creator can update
    }
  }
}
