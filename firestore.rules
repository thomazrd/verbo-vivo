
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users: Can read their own data, anyone can create a user doc (on signup)
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // Journals: Users can only CUD their own journal entries
    match /journals/{entryId} {
        allow read, write, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow create: if request.auth != null && request.request.resource.data.userId == request.auth.uid;
    }
    
    // Study Plans: Users can only CUD their own plans
    match /users/{userId}/plans/{planId} {
      allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Messages: Users can only CUD their own messages
    match /users/{userId}/messages/{messageId} {
        allow read, write, delete: if request.auth != null && request.auth.uid == userId;
    }

    // Meditations: Users can only CUD their own meditations
    match /meditations/{meditationId} {
        allow read, write, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow create: if request.auth != null && request.request.resource.data.userId == request.auth.uid;
    }
    
    // Prayers (Sanctuary): Users can only CUD their own prayers
    match /prayers/{prayerId} {
        allow read, write, delete: if request.auth != null && request.resource.data.userId == request.auth.uid;
        allow create: if request.auth != null && request.request.resource.data.userId == request.auth.uid;
    }

    // Prayer Circles: Only members of the circle can interact
    match /prayerCircles/{circleId} {
      allow read: if request.auth != null && get(/databases/$(database)/documents/prayerCircles/$(circleId)).data.members.hasAny([request.auth.uid]);
      allow create: if request.auth != null;
      allow update: if request.auth != null && resource.data.members.hasAny([request.auth.uid]);
    }

    match /prayerRequests/{requestId} {
        allow read, create: if request.auth != null && get(/databases/$(database)/documents/prayerCircles/$(request.resource.data.circleId)).data.members.hasAny([request.auth.uid]);
        allow update: if request.auth != null && get(/databases/$(database)/documents/prayerCircles/$(resource.data.circleId)).data.members.hasAny([request.auth.uid]);
    }

    // Shared Content (Hope Bridge): Public read, only authenticated write
    match /sharedContent/{contentId} {
      allow read: if true;
      allow create: if request.auth != null;
      // Allow viewCount increment by anyone, and update by creator
      allow update: if request.auth == null || (request.auth != null && request.resource.data.creatorId == request.auth.uid);
    }

    // Congregations:
    match /congregations/{congregationId} {
        allow read, create: if request.auth != null;
        allow update: if request.auth != null && resource.data.admins[request.auth.uid] == true;

        // Helper function to check for membership
        function isMember() {
            return get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data != null;
        }

        // Members can be read by other members, admin can write
        match /members/{userId} {
            allow read: if isMember();
            allow write: if resource.data.admins[request.auth.uid] == true || request.auth.uid == userId;
        }

        // Posts can be read/written by members
        match /posts/{postId} {
          allow read, create, update: if isMember();
          allow delete: if isMember() && request.auth.uid == resource.data.authorId;

          // Comments can be read/written by members
          match /comments/{commentId} {
            allow read, create: if isMember();
            allow update, delete: if isMember() && request.auth.uid == resource.data.authorId;
          }
        }
    }
  }
}
