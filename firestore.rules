rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =================================================================
    // Funções Auxiliares
    // =================================================================
    
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'ADMIN';
    }

    // =================================================================
    // Coleções Principais
    // =================================================================
    
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isUser(userId);
      allow update: if isUser(userId);
      // Delete should be handled by a Cloud Function for cleanup.
      allow delete: if isUser(userId);
    }
    
    match /userPushTokens/{userId} {
        allow read, write: if isUser(userId);
    }
    
    match /congregations/{congregationId} {
        allow read: if isSignedIn();
        // Creation is handled by a Cloud Function
        allow create: if isSignedIn(); 
        allow update: if isAdmin(request.auth.uid);
    }
    
    match /congregations/{congregationId}/members/{userId} {
        allow read: if isSignedIn();
        // Write is handled by Cloud Functions
        allow write: if isSignedIn();
    }
    
    match /congregations/{congregationId}/posts/{postId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isUser(request.resource.data.authorId) || isAdmin(request.auth.uid);
    }

    match /congregations/{congregationId}/posts/{postId}/{subcollection}/{docId} {
      allow read, write: if isSignedIn();
    }

    match /journals/{journalId} {
      allow read, create, update, delete: if isSignedIn() && isUser(request.resource.data.userId);
    }
    
    match /meditations/{meditationId} {
       allow read, create, update, delete: if isSignedIn() && isUser(request.resource.data.userId);
    }
    
    match /prayers/{prayerId} {
       allow read, create, update, delete: if isSignedIn() && isUser(request.resource.data.userId);
    }

    match /users/{userId}/plans/{planId} {
       allow read, create, update, delete: if isUser(userId);
    }
    
    match /sharedContent/{contentId} {
      allow read: if true;
      allow create: if isSignedIn();
      allow update, delete: if isUser(request.resource.data.creatorId);
    }

    match /users/{userId}/armors/{armorId} {
      allow read, write: if isUser(userId);
    }
    
    match /sharedArmors/{armorId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isUser(request.resource.data.userId);
    }

    match /prayerCircles/{circleId} {
      allow read, create: if isSignedIn();
      allow update: if isSignedIn() && (isUser(resource.data.createdBy) || request.resource.data.members.hasAny(request.auth.uid));
      allow delete: if isUser(resource.data.createdBy);
    }

    match /victories/{victoryId} {
      allow read: if true;
      allow create, update: if isSignedIn();
    }
    
    match /articles/{articleId} {
      allow read: if resource.data.status == 'published' || (isSignedIn() && isUser(resource.data.authorId));
      allow create, update, delete: if isSignedIn() && (isAdmin(request.auth.uid) || isUser(request.resource.data.authorId));
    }

    match /studies/{studyId} {
      allow read: if resource.data.status == 'PUBLISHED' || (isSignedIn() && isAdmin(request.auth.uid));
      allow write: if isSignedIn() && isAdmin(request.auth.uid);
    }
    
    match /suggestions/{suggestionId} {
        allow read, write: if isSignedIn() && isAdmin(request.auth.uid);
        allow create: if isSignedIn();
    }
    
    match /podcasts/{podcastId} {
      allow read: if isSignedIn();
      // Only admins should be able to create podcasts in a real scenario
      allow write: if isSignedIn() && isAdmin(request.auth.uid);
    }

    match /notifications/{notificationId} {
      // Only the recipient can read/update their notifications
      allow read, update: if isSignedIn() && isUser(resource.data.recipientId);
    }
  }
}
