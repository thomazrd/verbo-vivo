rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId;
    }
    
    match /userPushTokens/{userId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.recipientId;
    }

    match /journals/{journalId} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /meditations/{meditationId} {
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /feelingJourneys/{journeyId} {
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    match /prayers/{prayerId} {
        allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /sharedContent/{contentId} {
      allow read: if resource.data.status == 'ACTIVE';
      allow create: if request.auth != null && request.auth.uid == request.resource.data.creatorId;
      allow update: if request.auth != null && request.auth.uid == resource.data.creatorId;
    }
    
    match /congregations/{congregationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null; // Further secured by Cloud Functions
    }

    match /congregations/{congregationId}/members/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // Further secured by Cloud Functions
    }

    match /congregations/{congregationId}/posts/{postId} {
      // Any member of the congregation can read posts
      allow read: if request.auth != null && get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
      // Only members can create posts
      allow create: if request.auth != null && request.resource.data.authorId == request.auth.uid;
      // Author or admin can update/delete
      allow update, delete: if request.auth != null && (request.auth.uid == resource.data.authorId || get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status == 'ADMIN');
    }
    
    match /congregations/{congregationId}/posts/{postId}/{subcollection}/{docId} {
      // Allow any member of the congregation to read/write likes and comments
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/congregations/$(congregationId)/members/$(request.auth.uid)).data.status in ['MEMBER', 'ADMIN'];
    }

    match /articles/{articleId} {
      // Published articles can be read by anyone authenticated
      allow read: if request.auth != null && resource.data.status == 'published';
      // Drafts can only be read by the author
      allow read: if request.auth != null && request.auth.uid == resource.data.authorId && resource.data.status == 'draft';
      // Creating is allowed for authenticated users
      allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
      // Updating/deleting is only allowed for the author
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }

    match /users/{userId}/armors/{armorId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /sharedArmors/{armorId} {
      // Anyone authenticated can read shared armors
      allow read: if request.auth != null;
      // Only the original author can write/delete
      allow write, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /prayerCircles/{circleId} {
      // Allow read if public or if the user is a member
      allow read: if request.auth != null && (resource.data.isPublic == true || request.auth.uid in resource.data.members);
      // Allow create if the user is authenticated and is the creator/first member
      allow create: if request.auth != null && request.auth.uid == request.resource.data.createdBy && request.auth.uid in request.resource.data.members;
      // Allow update for members (e.g., joining via invite code) or for the creator (e.g., changing name)
      allow update: if request.auth != null && (request.auth.uid in resource.data.members);
      // Only creator can delete
      allow delete: if request.auth != null && request.auth.uid == resource.data.createdBy;
    }

    match /prayerRequests/{requestId} {
      // Any authenticated user can read requests. The query will filter by circleId.
      allow read: if request.auth != null;
      // A user must be the author to create a request
      allow create: if request.auth != null && request.auth.uid == request.resource.data.authorId;
      // Author can delete, any authenticated user can update the prayingUsers list
      allow update: if request.auth != null && (request.auth.uid == resource.data.authorId || request.resource.data.diff(resource.data).affectedKeys().hasOnly(['prayingUsers']));
      allow delete: if request.auth != null && request.auth.uid == resource.data.authorId;
    }
  }
}
